<?xml version="1.0" encoding="UTF-8"?>
<con:testSuite name="Final Project Repository" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Add Assertion"><con:settings/><con:config><script>/* -----------------------------------------------------------------------*/
//This file adds a messageId assertion to each test step 
/* -----------------------------------------------------------------------*/

//initiates the test step
def myTestStep

//iterates through all test steps in the test case
for (i = 0; i &lt; testRunner.testCase.getTestStepList().size(); i++) {

	//gets the test step
	log.info(testRunner.testCase.getTestStepList()[i].getName())
	myTestStep = testRunner.testCase.getTestStepList()[i]

	//checks to see if it is a groovy step and skips it. 
	if(myTestStep.config.type != 'groovy') {		
		def testAssertion = myTestStep.addAssertion('Script Assertion')
		testAssertion.setScriptText("assert messageExchange.responseHeaders['messageID'] != null")
	}
			
}

log.info("completed")

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Assertions"><con:settings/><con:config><script>/* -----------------------------------------------------------------------*/
//This file removes 1 assertion from each test step.
/* -----------------------------------------------------------------------*/

//initiates the test step 
def myTestStep

//iterates through all test steps in the test case
for (i = 0; i &lt; testRunner.testCase.getTestStepList().size(); i++) {

	//gets the test step
	log.info(testRunner.testCase.getTestStepList()[i].getName())
	myTestStep = testRunner.testCase.getTestStepList()[i]

	//checks to see if it is a groovy step and skips it. 
	if(myTestStep.config.type != 'groovy' &amp;&amp; myTestStep.getAssertionList().size > 0) {		
		myTestStep.removeAssertion(myTestStep.getAssertionAt(0))
	}
			
}
log.info("completed")



 
</script></con:config></con:testStep><con:testStep type="groovy" name="Change Names"><con:settings/><con:config><script>/* -----------------------------------------------------------------------*/
//this file goes through the entire test case that you are in, and changes the name 
//of all of one type of input, such as file identifier.
//after it completes it, it prints out a list of all the new inputs, so you can verify. 
/* -----------------------------------------------------------------------*/

//gets groovy utils and creates variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestStep
def myList = []

//iterates through all test steps in the test case
for (i = 0; i &lt; testRunner.testCase.getTestStepList().size(); i++) {

	//gets the test step
	log.info(testRunner.testCase.getTestStepList()[i].getName())
	myTestStep = testRunner.testCase.getTestStepList()[i]

	//checks to see if it is a groovy step and skips it. 
	if(myTestStep.config.type != 'groovy') {
		def step = myTestStep.getProperty('Request').value
		holder = groovyUtils.getXmlHolder(step)

		//-----------------------------------------------------------------------------------------------
		//THIS IS WHERE YOU EDIT THE DATA
		//U CAN CHANGE FILE IDENTIFIER AND FILE NAME HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//-----------------------------------------------------------------------------------------------

		holder.setNodeValue("//ns2:FileIdentifier","1GB_TI.txt")
		holder.updateProperty()
		String tmpRequest=holder.getPrettyXml()
		myTestStep.setPropertyValue('request',tmpRequest)
		
		//this prints it out, it is not necessary to change. 
		myList.add(holder.getNodeValue("//ns2:FileIdentifier"))
	}
}

log.info(myList)
log.info("completed")



 
</script></con:config></con:testStep><con:testStep type="groovy" name="Which Database (MFTV2)?"><con:settings/><con:config><script>/* -----------------------------------------------------------------------*/
// This file checks all databases, and determines which database a given 
// message id is in.
/* -----------------------------------------------------------------------*/

//EXAMPLE FORMAT: def messageId = ['afd1126.78250c1f.N40.16c48461077.N8000']
//the bracket [] is very important





/* -----------------this is where you input message id--------------------*/
def messageId = ['afc10cc.N4c7a643f.N21.16dd46efbc4.N7d90']
/* -----------------------------------------------------------------------*/















//imports sql 
import groovy.sql.Sql
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")

//connects to BCC
def Sql BDsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')

def Sql BTsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')

def Sql BIsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')

def Sql BSsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')

def Sql BPsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')

log.info('connected to BCC')

//connects to OP
def Sql ODsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-55f0&amp;arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')

def Sql OTsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&amp;ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')

def Sql OIsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-&amp;arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')

def Sql OSsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&amp;ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')

def Sql OPsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read#0NiyP-#ArctEstH2019#S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')

log.info('connected to OP')

//connects to TI
def Sql TDsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_DEV-Read-vfeg92df3b!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')

def Sql TTsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Test-Read-034591!623@taaesbrd001.test.ti.census.gov:1521/orcl')

def Sql TIsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_ITE-Read-df3b6542!55@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')

def Sql TSsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Stage-Read-df3b8730!@saaesbrd002.staging.ti.census.gov:1521/ORCL')

def Sql TPsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Read-Only-952dfv63b!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')

def Sql TOsql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_OMSOA34t3t47!!!hgf09@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')


log.info("connected to TI")

//sets the property of each database 
context.setProperty("sql",BDsql)
context.setProperty("sql",BTsql)
context.setProperty("sql",BIsql)
context.setProperty("sql",BSsql)
context.setProperty("sql",BPsql)
context.setProperty("sql",ODsql)
context.setProperty("sql",OTsql)
context.setProperty("sql",OIsql)
context.setProperty("sql",OSsql)
context.setProperty("sql",OPsql)
context.setProperty("sql",TDsql)
context.setProperty("sql",TTsql)
context.setProperty("sql",TIsql)
context.setProperty("sql",TSsql)
context.setProperty("sql",TPsql)
context.setProperty("sql",TOsql)

//sets up the query
def Transfer = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2 where cbmid = " 
Transfer = Transfer+"'"+messageId[0]+"'"
Transfer = Transfer+"Order by Consumer Asc"


/* -----------------------------------------------------------------------*/
//creates 2 lists of the same size that are indexed locked, allowing me to know which database the message id is in. 
def finalList = []
def dcList = ['BCC - Dev', 'BCC - Test','BCC - ITE','BCC - Stage','BCC - Prod','OP - Dev','OP - Test','OP - ITE','OP - Stage','OP - Prod','TI - Dev','TI - Test','TI - ITE','TI - Stage','TI - Prod','TI - ONM']

//Queries each database using a function call to isDatabase to see which database has the message id
finalList.add(isDatabase(BDsql,Transfer))
finalList.add(isDatabase(BTsql,Transfer))
finalList.add(isDatabase(BIsql,Transfer))
finalList.add(isDatabase(BSsql,Transfer))
finalList.add(isDatabase(BPsql,Transfer))
finalList.add(isDatabase(ODsql,Transfer))
finalList.add(isDatabase(OTsql,Transfer))
finalList.add(isDatabase(OIsql,Transfer))
finalList.add(isDatabase(OSsql,Transfer))
finalList.add(isDatabase(OPsql,Transfer))
finalList.add(isDatabase(TDsql,Transfer))
finalList.add(isDatabase(TTsql,Transfer))
finalList.add(isDatabase(TIsql,Transfer))
finalList.add(isDatabase(TSsql,Transfer))
finalList.add(isDatabase(TPsql,Transfer))
finalList.add(isDatabase(TOsql,Transfer))


//itereates through the list of true's and falses, and prints out the database depending on which ones are true
for (i = 0; i &lt; finalList.size(); i++) {

	if(finalList[i] == true) {
		log.info(dcList[i])
	}
}



//function that returns true if a messageid is found in the database, and returns false otherwise. 
def isDatabase(sql,Transfer) {
	def res = sql.rows(Transfer)
	if (res.size() == 0) {
		return(false)
	}
	else {
		log.info(res)
		return(true)
	}
	
}


			</script></con:config></con:testStep><con:testStep type="groovy" name="Which Database (Arch Trace)"><con:settings/><con:config><script><![CDATA[/* -----------------------------------------------------------------------*/
// This file checks all databases, and determines which database a given 
// message id is in.
/* -----------------------------------------------------------------------*/

//EXAMPLE FORMAT: def messageId = ['afd1126.78250c1f.N40.16c48461077.N8000']
//the bracket [] is very important



/* -----------------this is where you input message id--------------------*/
def messageId = ['afd1126.N71709b94.53.16dda9ebc4d.N7ff5']
/* ----------------------------------------------------------------------*/















//imports sql 
import groovy.sql.Sql
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")

//connects to BCC
def Sql BDsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')

def Sql BTsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')

def Sql BIsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')

def Sql BSsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')

def Sql BPsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')

log.info('connected to BCC')

//connects to OP
def Sql ODsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')

def Sql OTsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')

def Sql OIsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')

def Sql OSsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')

def Sql OPsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')

log.info('connected to OP')

//connects to TI
def Sql TDsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_DEV-read-=!98630!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')

def Sql TTsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Test-read3275!34!@taaesbrd001.test.ti.census.gov:1521/orcl')

def Sql TIsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_ITE-read38275!26!@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')

def Sql TSsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Stage-read-=!236!@saaesbrd002.staging.ti.census.gov:1521/ORCL')

def Sql TPsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Read-Only324345!!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')

def Sql TOsql = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_41OMSOA23626!62!6@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')


log.info("connected to TI")

//sets the property of each database 
context.setProperty("sql",BDsql)
context.setProperty("sql",BTsql)
context.setProperty("sql",BIsql)
context.setProperty("sql",BSsql)
context.setProperty("sql",BPsql)
context.setProperty("sql",ODsql)
context.setProperty("sql",OTsql)
context.setProperty("sql",OIsql)
context.setProperty("sql",OSsql)
context.setProperty("sql",OPsql)
context.setProperty("sql",TDsql)
context.setProperty("sql",TTsql)
context.setProperty("sql",TIsql)
context.setProperty("sql",TSsql)
context.setProperty("sql",TPsql)
context.setProperty("sql",TOsql)

//sets up the query
def Transfer = "SELECT * FROM ARCH_SERVICE_NG.arch_trace_monitor where conversation_id = "
Transfer = Transfer+"'"+messageId[0]+"'"
Transfer = Transfer+"Order by Origin Desc"

def Transfer2 = "SELECT * FROM ARCH_SERVICE.arch_trace_monitor where conversation_id = "
Transfer2 = Transfer2+"'"+messageId[0]+"'"
Transfer2 = Transfer2+"Order by Origin Desc"

/* -----------------------------------------------------------------------*/
//creates 2 lists of the same size that are indexed locked, allowing me to know which database the message id is in. 
def finalList = []
def dcList = ['BCC - Dev', 'BCC - Test','BCC - ITE','BCC - Stage','BCC - Prod','OP - Dev','OP - Test','OP - ITE','OP - Stage','OP - Prod','TI - Dev','TI - Test','TI - ITE','TI - Stage','TI - Prod','TI - ONM']

//Queries each database using a function call to isDatabase to see which database has the message id
finalList.add(isDatabase(BDsql,Transfer))
finalList.add(isDatabase(BTsql,Transfer))
//for some reason BCC ITE says arch_trace_monitor table does not exist.
try {
finalList.add(isDatabase(BIsql,Transfer))
}
catch (BCC_ITE_ERROR)
{
	//log.info('BCC ITE is not functional')
	finalList.add(false)
}
finalList.add(isDatabase(BSsql,Transfer))
finalList.add(isDatabase(BPsql,Transfer))
finalList.add(isDatabase(ODsql,Transfer))
finalList.add(isDatabase(OTsql,Transfer))
finalList.add(isDatabase(OIsql,Transfer))
finalList.add(isDatabase(OSsql,Transfer))
finalList.add(isDatabase(OPsql,Transfer))
finalList.add(isDatabase(TDsql,Transfer2))
finalList.add(isDatabase(TTsql,Transfer2))
finalList.add(isDatabase(TIsql,Transfer2))
finalList.add(isDatabase(TSsql,Transfer2))
finalList.add(isDatabase(TPsql,Transfer2))
finalList.add(isDatabase(TOsql,Transfer2))


//itereates through the list of true's and falses, and prints out the database depending on which ones are true
for (i = 0; i < finalList.size(); i++) {

	if(finalList[i] == true) {
		log.info(dcList[i])
	}
}



//function that returns true if a messageid is found in the database, and returns false otherwise. 
def isDatabase(sql,Transfer) {
	def res = sql.rows(Transfer)
	if (res.size() == 0) {
		return(false)
	}
	else {
		log.info(res)
		return(true)
	}
	
}


			]]></script></con:config></con:testStep><con:testStep type="groovy" name="New Test Suite from CSV (with endpoint )"><con:settings/><con:config><script><![CDATA[/* -----------------------------------------------------------------------*/
// This file creates a test suite from a CSV file in your Inputs folder
// edit the file titled "csv.csv" for information on how to edit
/* -----------------------------------------------------------------------*/


//This program is seperated into 5 Sections. 
/*---------------------------------------------------------------------------------------------- */
//Section 1: File Io Section -- reads csv.csv file.
/*---------------------------------------------------------------------------------------------- */
import com.eviware.soapui.config.CredentialsConfig;

//reads from CSV file
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def csvFilePath = "Inputs/csv.csv"
context.fileReader = new BufferedReader(new FileReader(csvFilePath))
rowsData = context.fileReader.readLines()
int rowsize = rowsData.size()

//creates variables for inputs row
def endPoint1
def runFl = ''
def largeFl = ''
def dbase = ''
def env = ''


//initiates the 2d list, and iterates through the CSV data
counter = 0 
myList = [[]]

//iterates through the csv data
for( i in rowsData) {

	//splits the CSV data by cell
	if(i.size() > 20) {
	newList = i.split(",")


	//adds the splitted data to the 2d list, and dynamically creates more lists 
	myList[counter].add(newList[0])
	myList[counter].add(newList[1])
	myList[counter].add(newList[2])
	myList[counter].add(newList[3])
	myList[counter].add(newList[4])

	//adds the input row data
	if (counter == 1) {
		//endPoint1 = newList[5]
		dbase = newList[6]
		env = newList[7]
		runFl = newList[8]
		largeFl = newList[9]
	}
	
	counter += 1
	myList.add([])
	}

}

//formats the endpoint using the function at the bottom
endPoint1 = formatEndpoint(dbase,env)

//if data center / environment is invalid, quits
if (endPoint1 == false) {
	return
}


//removes any empty lists (from empty rows in csv file)
for (i = myList.size()-1; i >= 0; i--) {
	if (myList[i].size() == 0) {
		myList.remove(i)
	}
	
}

//removes the first label row
myList.remove(0)

/*---------------------------------------------------------------------------------------------- */
//Section 2: Creating the test suite / test case Section
/*---------------------------------------------------------------------------------------------- */

//imports groovy utilities
import com.eviware.soapui.impl.wsdl.teststeps.registry.WsdlTestRequestStepFactory
import com.eviware.soapui.impl.wsdl.teststeps.registry.GroovyScriptStepFactory

//creats a test suite, and a test case.
def date1 = new Date()
def suiteName = ''
suiteName = suiteName+(date1.month+1)+"."+date1.date+" "+dbase+" "+env
def suite = context.testCase.testSuite.project.addNewTestSuite(suiteName)
def tc = suite.addNewTestCase("Test Case")
tc.setFailOnError(false)
def operation = testRunner.testCase.testSuite.project.getInterfaceAt(0).getOperationList()[0]
def factory = new WsdlTestRequestStepFactory()

//iterates through the 2d List, and creates the names for each test step based on the correlation ID 
def arr = []
for (i in myList) {
	arr.add(i[2])
}

//iterates through all of the steps in the file
def counter2 = 0
for(def x : arr)
{
log.info "For each Loop" + x.toString();
config = factory.createConfig(operation,x)
testStep = tc.addTestStep(config)



//adds the data to the soap request, Scroll right to see where newlines and data is added
def myString = 
'<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r\n  	<soapenv:Body>\r\n  		<ns2:ProcessManagedFileTransferCBM xmlns:ns2="http://esoa.census.gov/soa/CanonicalModel/Core/CDM/ManagedFileTransferCDM/V2" xmlns:ns1="http://esoa.census.gov/soa/CanonicalModel/Core/Common/V1">\r\n  			<ns1:CBMHeader>\r\n  				<ns1:Sender>'+myList[counter2][0]+'</ns1:Sender>\r\n  				<ns1:TargetList>\r\n  					<ns1:Target>'+myList[counter2][1]+'</ns1:Target>\r\n  				</ns1:TargetList>\r\n  			</ns1:CBMHeader>\r\n  			<ns2:ProcessManagedFileTransfer>\r\n  				<ns2:CorrelationID>'+myList[counter2][2]+'</ns2:CorrelationID>\r\n  				<ns2:FileIdentifier>'+myList[counter2][3]+'</ns2:FileIdentifier>\r\n  				<ns2:TargetExtensionList>\r\n  					<ns2:TargetExtension target="'+myList[counter2][1]+'">\r\n  						<ns1:extensionElement elementName="fileType" elementType="String">'+myList[counter2][4]+'</ns1:extensionElement>\r\n  					</ns2:TargetExtension>\r\n  				</ns2:TargetExtensionList>\r\n  			</ns2:ProcessManagedFileTransfer>\r\n  		</ns2:ProcessManagedFileTransferCBM>\r\n  	</soapenv:Body>\r\n  </soapenv:Envelope> '


//adds script assertions
//testStep.addAssertion("SOAP Response")
def testAssertion = testStep.addAssertion('Script Assertion')
testAssertion.setScriptText("assert messageExchange.responseHeaders['messageID'] != null")

//adds authenticaton data and endPoint
testStep.properties['Request'].value = myString
testStep.properties['Endpoint'].value = endPoint1
testStep.getTestRequest().setUsername('SOAT')
testStep.getTestRequest().setPassword('S3veNM1nus6i5EQualto3PLU3$pa54')
testStep.getTestRequest().setSelectedAuthProfileAndAuthType('Basic',CredentialsConfig.AuthType.PREEMPTIVE)


counter2 += 1
}

/*---------------------------------------------------------------------------------------------- */
//Section 3: Creating the Groovy Scripts Section
/*---------------------------------------------------------------------------------------------- */

//set a flag to start recording the date
def flag = new Date()

//creates a new groovy step in the test suite, and reads the script from a file. MFTV2
def MFTV2name = "MFTV2"+dbase+env
gs = tc.addTestStep( GroovyScriptStepFactory.GROOVY_TYPE,MFTV2name)
def MFTV2File = new File('Inputs/GroovyMFTV2C.txt')
def MFTV2String = ''
def c5 = 0
def yourData1 = MFTV2File.eachLine { line ->
	if (c5 == 6) {
		MFTV2String = MFTV2String +"def dc = '"+dbase+"'"
	}
	else if (c5 == 7) {
		MFTV2String = MFTV2String +"def env = '"+env+"'"
	}
	else {
		MFTV2String = MFTV2String + line
	}
	c5 += 1
	MFTV2String = MFTV2String + '\r\n'
}
gs.properties["script"].value = MFTV2String

//creates a new groovy step in the test suite, and reads the script from a file. Arch Trace
def ArchTraceName = "ArchTrace"+dbase+env
gs2 = tc.addTestStep( GroovyScriptStepFactory.GROOVY_TYPE,ArchTraceName)
def ArchTraceFile = new File('Inputs/GroovyArchTraceC.txt')
def ArchTraceString = ''
def c6 = 0
def yourData2 = ArchTraceFile.eachLine { line ->
	if (c6 == 6) {
		ArchTraceString = ArchTraceString +"def dc = '"+dbase+"'"
	}
	else if (c6 == 7) {
		ArchTraceString = ArchTraceString +"def env = '"+env+"'"
	}
	else {
		ArchTraceString = ArchTraceString + line
	}
	c6 += 1
	ArchTraceString = ArchTraceString + '\r\n'
}
gs2.properties["script"].value = ArchTraceString

/*---------------------------------------------------------------------------------------------- */
//Section 4: Run+Dont Run & Small+Large File section
//Decides whether to run as a small file, large file, or not to run at all
/*---------------------------------------------------------------------------------------------- */
//small file running
if (runFl == 'Y') {
	tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false)
	context.testCase.testSuite.project.save()
	use (groovy.time.TimeCategory) {
		def totalTime = new Date() - flag
		log.info(totalTime)
		if (totalTime.seconds > 10 || totalTime.minutes > 0 ) {
			log.info("Completed")
		}
		else {
			log.info("Test Suite Created - Error in execution. Try running Groovy Scripts Manually")
		}
	}
}
//large file 
else if (largeFl == 'Y') {

	//deletes the MFTV2 & Arch Trace files to replace them with large files
	tc.removeTestStep(tc.getTestStepAt((tc.getTestStepCount()-1)))
	tc.removeTestStep(tc.getTestStepAt((tc.getTestStepCount()-1)))

	//adds step 1
	def stepOneName = "LargeFilesStepOne"+dbase+env
	gs3 = tc.addTestStep( GroovyScriptStepFactory.GROOVY_TYPE,stepOneName)
	def LargeFilesFile = new File('Inputs/GroovyLargeFilesC.txt')
	def LargeFilesString = ''
	def yourData3 = LargeFilesFile.eachLine { line ->
	LargeFilesString = LargeFilesString + line
	LargeFilesString = LargeFilesString + '\r\n'
	}
	gs3.properties["script"].value = LargeFilesString

	//runs the entire test case
	tc.run(new com.eviware.soapui.support.types.StringToObjectMap(), false)

	//adds step 2. tester will need to manually run step 2 after set amount of time. 
	def MFTV2Name2 = "LargeFiles MFTV2 "+dbase+env
	gs4 = tc.addTestStep( GroovyScriptStepFactory.GROOVY_TYPE,MFTV2Name2)
	def LargeFilesFile2 = new File('Inputs/GroovyLargeFilesMFTV2C.txt')
	def LargeFilesString2 = ''
	def c7 = 0
	def yourData4 = LargeFilesFile2.eachLine { line ->
	if (c7 == 6) {
		LargeFilesString2 = LargeFilesString2 +"def dc = '"+dbase+"'" 
	}
	else if (c7 == 7) {
		LargeFilesString2 = LargeFilesString2 +"def env = '"+env+"'"
	}
	else {
		LargeFilesString2 = LargeFilesString2 + line
	}
		c7 += 1
		LargeFilesString2 = LargeFilesString2 + '\r\n'
	}
	gs4.properties["script"].value = LargeFilesString2

	def ArchTraceName2 = "LargeFiles ArchTrace "+dbase+env
	gs5 = tc.addTestStep( GroovyScriptStepFactory.GROOVY_TYPE,ArchTraceName2)
	def LargeFilesFile3 = new File('Inputs/GroovyLargeFilesArchTraceC.txt')
	def LargeFilesString3 = ''
	def c8 = 0
	def yourData5 = LargeFilesFile3.eachLine { line ->
	if (c8 == 6) {
		LargeFilesString3 = LargeFilesString3 +"def dc = '"+dbase+"'" 
	}
	else if (c8 == 7) {
		LargeFilesString3 = LargeFilesString3 +"def env = '"+env+"'"
	}
	else {
		LargeFilesString3 = LargeFilesString3 + line
	}
		c8 += 1
		LargeFilesString3 = LargeFilesString3 + '\r\n'
	}
	gs5.properties["script"].value = LargeFilesString3

	log.info("Created Large File Reader, Run Step 2 after enough time has passed")

}

//if both flags are set to N, runs nothing, but the test suite is created.
else {
	log.info("Did Not Run, Completed")
}


/*---------------------------------------------------------------------------------------------- */
//Section 5: Format Endpoint
//chooses which endpoint to use based on the data center and environment provided
/*---------------------------------------------------------------------------------------------- */
def formatEndpoint(dc, env) {

	//creates the flag and endpoint variable
	def flag = false
	def endpoint = ''

	//makes the inputs all uppercase 
	dc = dc.toUpperCase()
	env = env.toUpperCase()

	//if bcc, chooses one of the 5 bcc endpoints
	if (dc.contains('C') || dc.contains('B')) {
		if (env == 'DEV') {
			log.info('BCC DEV')
			endpoint = 'https://esb-app-soa.dev.asd.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
		else if (env == 'TEST') {
			//mft
			log.info('BCC TEST')
			endpoint = 'https://esb-app2-soa.test.asd.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
		else if (env == 'ITE') {
			log.info('BCC ITE')
			endpoint = 'https://esb-app.ite.asd.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
		else if (env == 'STAGE') {
			log.info('BCC STAGE')
			endpoint = 'https://esb-app2-soa.stage.asd.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
		else if (env == 'PROD') {
			log.info('BCC PROD')
			endpoint = 'https://esb-app-soa.asd.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
		else {
			log.info("Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}

	//if OP, chooses one of the 5 op databases
	else if (dc.contains('O') || dc.contains('P')) {
		if (env == 'DEV') {
			endpoint = 'https://dr7esbwb001-vip.dev.bdc.ti.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
		else if (env == 'TEST') {
			log.info('OP TEST')
			endpoint = 'https://tr7esbwb001-vip.test.bdc.ti.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
		else if (env == 'ITE') {
			log.info('OP ITE') 
			endpoint = 'https://ir7esbwb003-vip.ite.bdc.ti.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
		else if (env == 'STAGE') {
			log.info('OP STAGE')
			endpoint = 'https://sr7esbwb003-vip.staging.bdc.ti.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
		else if (env == 'PROD') {
			log.info('OP PROD')
			endpoint = 'https://pr7esbwb021-vip.prod.bdc.ti.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
	//else if (env == 'OTDR') {
		//log.info('OP OTDR')
		//NOT FUNCTIONAL
	//}
		else {
			log.info("Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}

	//all this is ti WEST
	//if TI, chooses one of the 6 TI databases
	else if (dc.contains('T') || dc.contains('I')) {
		if (env == 'DEV') {
			log.info('TI DEV')
			endpoint = 'https://esb.dev.ti.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
		else if (env == 'TEST') {
			log.info('TI TEST')
			endpoint = 'https://esb.test.ti.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
		else if (env == 'ITE') {
			log.info('TI ITE')
			endpoint = 'https://esb.ite.ti.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
		else if (env == 'STAGE') {
			log.info('TI STAGE')
			endpoint = 'https://esb.staging.ti.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
		else if (env == 'PROD') {
			log.info('TI PROD')
			endpoint = 'https://esb.ti.census.gov/ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
		else if (env == 'ONM') {
			log.info('TI ONM')
			endpoint = 'https://esb.om.ti.census.gov/ /ManagedFileTransferCBS/ManagedFileTransferCBSSOAP'
		}
	//else if (env == 'OTDR') {
		//log.info('OP OTDR')
		//NOT FUNCTIONAL
	//}
		else {
			log.info("Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', 'ONM', or 'PROD'")
			flag = true
		}
	}
	else {
		log.info("Invalid Data Center, Please choose either 'BCC', 'OP', or 'TI'")
		flag = true
	}

	//if no errors, returns the endpoint
	if (flag != true) {
		return(endpoint)
	}

	//if theres an error, returns false and quits the program
	else {
		log.info("Invalid, Quitting...")
		return(false)
	}

}]]></script></con:config></con:testStep><con:testStep type="jdbc" name="Utilities"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Single Query MFTV2"><con:settings/><con:config><script><![CDATA[/* -----------------------------------------------------------------------*/
//this file runs a query on a single message id for MFTV2
/* -----------------------------------------------------------------------*/


//EXAMPLE FORMAT: def messageId = ['afd1126.78250c1f.N40.16c48461077.N8000']
//the bracket [] is very important
	
/* -----------------this is where you input message id--------------------*/
def messageId = ['afc10d8.N5f73eb0f.N66.16dd9f9b54a.N7fc2']
/* -----------------------------------------------------------------------*/

/* --------this is where you input the environment & data center ---------*/
def dc = 'BCC'
def env =  'Test'
/* -----------------------------------------------------------------------*/

/* -----------------------------------------------------------------------*/
/*The script should tell you what to do - read the log for additional info*/
/* -----------------------------------------------------------------------*/













//imports
import groovy.sql.Sql
import jxl.*
import jxl.write.*
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")

def Sql sql
def Sql sql2

def flag = false

def databaseInfo = database(sql, sql2, flag, dc, env) 

if (databaseInfo[2] == true) {
	log.info('quitting...')
	return
}

sql = databaseInfo[0]


//initiates the workbook
log.info('database connection successful')

/* ----------------!!! NAME OF THE FILE IS DIWN HERE !!!------------------*/
WritableWorkbook workbook = Workbook.createWorkbook(new File("Outputs/"+dc.toUpperCase()+" - "+env.toUpperCase()+" SingleQuery MFTV2 Output.xls"))
WritableSheet sheet = workbook.createSheet("Worksheet 1", 0)

//creates label row
sheet.addCell(new Label(1, 1,"Name"))
sheet.addCell(new Label(2, 1,"Message Id"))
sheet.addCell(new Label(3, 1,"Date"))
sheet.addCell(new Label(4, 1,"Status"))

sheet.addCell(new Label(5, 1,"Correlation ID"))
sheet.addCell(new Label(6, 1,"File Identifier"))
sheet.addCell(new Label(7, 1,"Provider"))
sheet.addCell(new Label(8, 1,"Consumer"))
sheet.addCell(new Label(9, 1,"Status"))
sheet.addCell(new Label(10, 1,"File Bytes"))

sheet.addCell(new Label(11, 1,"Activity"))
sheet.addCell(new Label(12, 1, "-------"))
sheet.addCell(new Label(13, 1,"Consumer"))
sheet.addCell(new Label(14, 1,"Action"))
sheet.addCell(new Label(15, 1,"Status"))
sheet.addCell(new Label(16, 1,"Start"))
sheet.addCell(new Label(17, 1,"End"))
sheet.addCell(new Label(18, 1,"Total Time"))
sheet.addCell(new Label(19, 1,"Directory Path"))


sheet.addCell(new Label(20, 1,"Error Time"))
sheet.addCell(new Label(21, 1,"Error Code"))
sheet.addCell(new Label(22, 1,"Error Message"))
sheet.addCell(new Label(23, 1,"Error Origin"))
sheet.addCell(new Label(24, 1,"Error Trace"))



//allows the file time to connect to the database.
Thread.sleep(1000)

def counter = 3
	
//initiates the query strings 
def Transfer = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2 where cbmid = "
def Activity = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2_ACTIVITY where cbmid = "
def ErrorMsg = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2_ERROR where cbmid = "



//Checks to see if string exists
if (messageId[0].length() > 1) {

	//queries the database for the necessary information
	Transfer = Transfer+"'"+messageId[0]+"'"
	Transfer = Transfer+"Order by Consumer Asc"
	def res = sql.rows(Transfer)

	Activity = Activity+"'"+messageId[0]+"'"
	Activity = Activity+"Order by Consumer, Action Asc"
	def res2 = sql.rows(Activity)

	log.info(res)

	if (res.size() == 0) {
		log.info("Database Error")
		sheet.addCell(new Label(5, counter, "Database empty"))		
		workbook.write()
		workbook.close()	
		return
	}

	//Date data = new Date().parse(res2[0].START_TIME)

	//SimpleDateFormat data = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss.S')

	//appends the file (soapUI data) if the messageId exists
	sheet.addCell(new Label(2, counter, messageId[0]))

	log.info(res[0].CORRELATION_ID)


	
	if (res.size() < 2) {

		


			//mftv2 data 1 
			mftv2(counter,res,0,sheet)

			//error data 1
			if (res[0].STATUS == 'Failed') {
			
				ErrorMsg = ErrorMsg+"'"+messageId[0]+"'"
				def res3 = sql.rows(ErrorMsg)

				//error call
				error(counter,res3,0,sheet)
			}
			
			//activity data 1
			activity(counter,res2,0,sheet) 
			
			counter += 1

			//activity data 2 
			activity(counter,res2,1,sheet)

		} // if non cdl entries 
		
		//CDL entries
		else {

			//mftv2 data 1
			mftv2(counter,res,0,sheet)

			//error data 1
			def res3
			if (res[0].STATUS == 'Failed') {
			
				ErrorMsg = ErrorMsg+"'"+messageId[0]+"'"
				res3 = sql.rows(ErrorMsg)
				//log.info(res3)

				//error call
				error(counter,res3,0,sheet)
			}
			
			//activity data 1 
			activity(counter,res2,0,sheet)
			
			counter += 1

			//activity data 2
			activity(counter,res2,1,sheet)


			counter += 1 

			//mftv2 data 2
			mftv2(counter,res,1,sheet)

			if (res[1].STATUS == 'Failed') {

				//error call
				ErrorMsg = ErrorMsg+"'"+messageId[0]+"'"
				res3 = sql.rows(ErrorMsg)
				error(counter,res3,1,sheet)
			}
			
			//activity data 3

			activity(counter,res2,2,sheet)

			counter += 1

			//activity data 4
				activity(counter,res2,3,sheet)

			//error data 2 
		}


} // if messageId.length() > 0


else {
	log.info("Invalid Message Id")
	sheet.addCell(new Label(2, counter, "Invalid Message Id, make sure it is in the format ['afd1126.78250c1f.N40.16c48461077.N8000']"))
} // else

workbook.write()
workbook.close()

log.info("Completed")

def mftv2(counter, res, increment,sheet) {

	sheet.addCell(new Label(5, counter, res[increment].CORRELATION_ID))
	sheet.addCell(new Label(6, counter, res[increment].FILE_IDENTIFIER))
	sheet.addCell(new Label(7, counter, res[increment].PROVIDER))
	sheet.addCell(new Label(8, counter, res[increment].CONSUMER))
	sheet.addCell(new Label(9, counter, res[increment].STATUS))
	sheet.addCell(new Label(10, counter, res[increment].FILE_BYTES.toString()))
	return(sheet)
}

def activity(counter, res2, increment,sheet) {

	if ((increment+1) <= res2.size()) {
	sheet.addCell(new Label(13, counter, res2[increment].CONSUMER))
	sheet.addCell(new Label(14, counter, res2[increment].ACTION))
	sheet.addCell(new Label(15, counter, res2[increment].STATUS))
	sheet.addCell(new Label(16, counter, res2[increment].START_TIME.toString()))
	sheet.addCell(new Label(17, counter, res2[increment].END_TIME.toString()))
	if (res2[increment].START_TIME == null || res2[increment].END_TIME == null) {
		log.info("NULL TIME")
	}
	else {
	use (groovy.time.TimeCategory) {
	sheet.addCell(new Label(18, counter, (res2[increment].END_TIME.timestampValue()-res2[increment].START_TIME.timestampValue()).toString()))
	}
	}
	sheet.addCell(new Label(19, counter, res2[increment].DIRECTORY_PATH))
	return(sheet)
	}

}

def error(counter, res3, increment, sheet) {

	if (increment == 1 && res3.size() == 1) {
		increment = 0
	}
	sheet.addCell(new Label(20, counter, res3[increment].ERROR_TIME.toString()))
	sheet.addCell(new Label(21, counter, res3[increment].ERROR_CODE))
	sheet.addCell(new Label(22, counter, res3[increment].ERROR_MESSAGE))
	sheet.addCell(new Label(23, counter, res3[increment].ERROR_ORIGIN))
	sheet.addCell(new Label(24, counter, res3[increment].ERROR_TRACE.toString()))

	return(sheet)

}

def database(sql, sql2, flag, dc, env) {


	dc = dc.toUpperCase()
	env = env.toUpperCase()

	if (dc.contains('C') || dc.contains('B')) {
		if (env == 'DEV') {
			log.info('BCC DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
		}
		else if (env == 'TEST') {
			log.info('BCC TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
		}
		else if (env == 'ITE') {
			log.info('BCC ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
		}
		else if (env == 'STAGE') {
			log.info('BCC STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
		}
		else if (env == 'PROD') {
			log.info('BCC PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
		}
		else {
			log.info("(BCC) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}
	else if (dc.contains('O') || dc.contains('P')) {
		if (env == 'DEV') {
			log.info('OP DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
		}
		else if (env == 'TEST') {
			log.info('OP TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
		}
		else if (env == 'ITE') {
			log.info('OP ITE') 
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')	
		}
		else if (env == 'STAGE') {
			log.info('OP STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
		}
		else if (env == 'PROD') {
			log.info('OP PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read#0NiyP-#ArctEstH2019#S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(OP) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}	

	//all this is ti WEST
	else if (dc.contains('T') || dc.contains('I')) {
			if (env == 'DEV') {
			log.info('TI DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_DEV-Read-vfeg92df3b!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_DEV-read-=!98630!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
		}
		else if (env == 'TEST') {
			log.info('TI TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Test-Read-034591!623@taaesbrd001.test.ti.census.gov:1521/orcl')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Test-read3275!34!@taaesbrd001.test.ti.census.gov:1521/orcl')
		}
		else if (env == 'ITE') {
			log.info('TI ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_ITE-Read-df3b6542!55@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_ITE-read38275!26!@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
		}
		else if (env == 'STAGE') {
			log.info('TI STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Stage-Read-df3b8730!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Stage-read-=!236!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
		}
		else if (env == 'PROD') {
			log.info('TI PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Read-Only-952dfv63b!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Read-Only324345!!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
		}
		else if (env == 'ONM') {
			log.info('TI ONM')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_OMSOA34t3t47!!!hgf09@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')	
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_41OMSOA23626!62!6@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(TI) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', 'ONM', or 'PROD'")
			flag = true
		}
	}		

	else {
		log.info("Invalid Data Center, Please choose either 'BCC', 'OP', or 'TI'")
		flag = true
	} 

	if (flag == true) {
		return([sql, sql2, true, dc, env])
	}
	else {
		return([sql, sql2, false, dc, env])
	}
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Single Query Arch Trace"><con:settings/><con:config><script><![CDATA[/* -----------------------------------------------------------------------*/
//this file runs a query on a single message id for Arch Trace
/* -----------------------------------------------------------------------*/

//EXAMPLE FORMAT: def messageId = ['afd1126.78250c1f.N40.16c48461077.N8000']
//the bracket [] is very important
	
/* -----------------this is where you input message id--------------------*/
def messageId = ['afd1126.N71709b94.53.16dda9ebc4d.N7ff5']
/* -----------------------------------------------------------------------*/

/* --------this is where you input the environment & data center ---------*/
def dc = 'op'
def env =  'Test'
/* -----------------------------------------------------------------------*/

/* -----------------------------------------------------------------------*/
/*The script should tell you what to do - read the log for additional info*/
/* -----------------------------------------------------------------------*/














//imports
import groovy.sql.Sql
import jxl.*
import jxl.write.*
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")

def Sql sql
def Sql sql2

def flag = false

def databaseInfo = database(sql, sql2, flag, dc, env) 

if (databaseInfo[2] == true) {
	log.info('quitting...')
	return
}

sql = databaseInfo[1]


//initiates the workbook
log.info('database connection successful')

/* ----------------!!! NAME OF THE FILE IS DIWN HERE !!!------------------*/

WritableWorkbook workbook = Workbook.createWorkbook(new File("Outputs/"+dc.toUpperCase()+" - "+env.toUpperCase()+" SingleQuery ArchTrace Output.xls"))
WritableSheet sheet = workbook.createSheet("Worksheet 1", 0)

sheet.addCell(new Label(1, 1,"Name"))
sheet.addCell(new Label(2, 1,"Message Id"))
sheet.addCell(new Label(3, 1,"Date"))
sheet.addCell(new Label(4, 1,"Status"))

sheet.addCell(new Label(5, 1,"Sender"))
sheet.addCell(new Label(6, 1,"Target"))
sheet.addCell(new Label(7, 1,"Origin"))
sheet.addCell(new Label(8, 1,"Message Date"))
sheet.addCell(new Label(9, 1,"Ack_Id"))
sheet.addCell(new Label(10, 1,"Kafka Topic"))
sheet.addCell(new Label(11, 1,"Kafka Partition"))
sheet.addCell(new Label(12, 1,"Kafka Offset"))
sheet.addCell(new Label(13, 1,"Business Id"))
sheet.addCell(new Label(14, 1,"State"))
sheet.addCell(new Label(15, 1,"Trace Id"))

sheet.addCell(new Label(16, 1,"Error GUID"))
sheet.addCell(new Label(17, 1,"Sender"))
sheet.addCell(new Label(18, 1,"Protocol"))
sheet.addCell(new Label(19, 1,"Kafka Topic"))
sheet.addCell(new Label(20, 1,"Error Date"))
sheet.addCell(new Label(21, 1,"Error Code"))
sheet.addCell(new Label(22, 1,"Error Reason"))
sheet.addCell(new Label(23, 1,"Error Detail"))


Thread.sleep(1000)

def counter = 3

//initiates the query strings 
  def Trace
  def Hospital
  if (dc.toUpperCase().contains('C') || dc.toUpperCase().contains('O')) {
  	Trace = "SELECT * FROM ARCH_SERVICE_NG.arch_trace_monitor where conversation_id = "
  	Hospital = "SELECT * FROM ARCH_SERVICE_NG.arch_error_hospital where conversation_id = "
  }
  else {
  	Trace = "SELECT * FROM ARCH_SERVICE.arch_trace_monitor where conversation_id = "
  	Hospital = "SELECT * FROM ARCH_SERVICE.arch_error_hospital where conversation_id = "
  }

if (messageId[0].length() > 1) {

		

		Trace = Trace+"'"+messageId[0]+"'"+" Order By Origin Desc"
		def res = sql.rows(Trace)

		Hospital = Hospital+"'"+messageId[0]+"'"
		def res2 = sql.rows(Hospital)

		if (res.size() == 0) {
			log.info("Database Error")
			sheet.addCell(new Label(5, counter, "Database empty"))		
			workbook.write()
			workbook.close()	
			return
	}

		sheet.addCell(new Label(2, counter, messageId[0]))

		if(res.size() < 3) {

			log.info("2")

			//adds the first row 
			trace(counter, res, 0, sheet)

			counter += 1

			//adds the second row
			trace(counter, res, 1, sheet)

			//if theres an error, checks the error hopsital 
			if (res[0].MESSAGE_STATE != 'DELIVERED' || res[1].MESSAGE_STATE != 'DELIVERED') {

				hospital(counter, res2, 0, sheet)
				
			} // if error hopsital
		} //if size < 3

		else {
			// adds the first row 
			trace(counter,res,0,sheet)
			counter += 1

			//adds the second row
			trace(counter,res,1,sheet)

			counter += 1

			//adds the 3rd row (cdl legacy only)
			trace(counter,res,2,sheet)
			
			counter += 1

			// adds the 4th row (cdl legacy only)
			trace(counter,res,3,sheet)

			// if there is an error, checks the error hospital
			if (res[0].MESSAGE_STATE != 'DELIVERED' || res[1].MESSAGE_STATE != 'DELIVERED' || res[2].MESSAGE_STATE != 'DELIVERED'  || res[3].MESSAGE_STATE != 'DELIVERED' )
			{


				hospital(counter,res2,0,sheet)
				
			} // error hospital if (4 entries)
		
		} // else (4 entries)

	

		

}
else {
	log.info("invalid message Id")
	sheet.addCell(new Label(2, counter, "Invalid Message Id, make sure it is in the format ['afd1126.78250c1f.N40.16c48461077.N8000']"))
} // else


workbook.write()
workbook.close()
log.info("Completed")

def trace (counter, res, increment, sheet) {
	
	sheet.addCell(new Label(5, counter, res[increment].SENDER))
	sheet.addCell(new Label(6, counter, res[increment].TARGET))
	sheet.addCell(new Label(7, counter, res[increment].ORIGIN))
	sheet.addCell(new Label(8, counter, res[increment].MESSAGE_DATE.toString()))
	sheet.addCell(new Label(9, counter, res[increment].ACK_ID))
	sheet.addCell(new Label(10, counter, res[increment].KAFKA_TOPIC))
	sheet.addCell(new Label(11, counter, res[increment].KAFKA_PARTITION.toString()))
	sheet.addCell(new Label(12, counter, res[increment].KAFKA_OFFSET.toString()))
	sheet.addCell(new Label(13, counter, res[increment].BUSINESS_ID))
	sheet.addCell(new Label(14, counter, res[increment].MESSAGE_STATE))
	sheet.addCell(new Label(15, counter, res[increment].TRACE_ID.toString()))

	return(sheet)

}

def hospital(counter, res2, increment, sheet) {

	sheet.addCell(new Label(16, counter, res2[increment].ERROR_GUID))
	sheet.addCell(new Label(17, counter, res2[increment].SENDER))
	sheet.addCell(new Label(18, counter, res2[increment].PROTOCOL))
	sheet.addCell(new Label(19, counter, res2[increment].KAFKA_TOPIC))
	sheet.addCell(new Label(20, counter, res2[increment].ERROR_DATE.toString()))
	sheet.addCell(new Label(21, counter, res2[increment].ERROR_CODE))
	sheet.addCell(new Label(22, counter, res2[increment].ERROR_REASON))
	sheet.addCell(new Label(23, counter, res2[increment].ERROR_DETAIL))

	return(sheet)
}

def database(sql, sql2, flag, dc, env) {


	dc = dc.toUpperCase()
	env = env.toUpperCase()

	if (dc.contains('C') || dc.contains('B')) {
		if (env == 'DEV') {
			log.info('BCC DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
		}
		else if (env == 'TEST') {
			log.info('BCC TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
		}
		else if (env == 'ITE') {
			log.info('BCC ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
		}
		else if (env == 'STAGE') {
			log.info('BCC STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
		}
		else if (env == 'PROD') {
			log.info('BCC PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
		}
		else {
			log.info("(BCC) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}
	else if (dc.contains('O') || dc.contains('P')) {
		if (env == 'DEV') {
			log.info('OP DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
		}
		else if (env == 'TEST') {
			log.info('OP TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
		}
		else if (env == 'ITE') {
			log.info('OP ITE') 
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')	
		}
		else if (env == 'STAGE') {
			log.info('OP STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
		}
		else if (env == 'PROD') {
			log.info('OP PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read#0NiyP-#ArctEstH2019#S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(OP) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}	

	//all this is ti WEST
	else if (dc.contains('T') || dc.contains('I')) {
			if (env == 'DEV') {
			log.info('TI DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_DEV-Read-vfeg92df3b!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_DEV-read-=!98630!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
		}
		else if (env == 'TEST') {
			log.info('TI TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Test-Read-034591!623@taaesbrd001.test.ti.census.gov:1521/orcl')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Test-read3275!34!@taaesbrd001.test.ti.census.gov:1521/orcl')
		}
		else if (env == 'ITE') {
			log.info('TI ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_ITE-Read-df3b6542!55@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_ITE-read38275!26!@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
		}
		else if (env == 'STAGE') {
			log.info('TI STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Stage-Read-df3b8730!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Stage-read-=!236!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
		}
		else if (env == 'PROD') {
			log.info('TI PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Read-Only-952dfv63b!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Read-Only324345!!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
		}
		else if (env == 'ONM') {
			log.info('TI ONM')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_OMSOA34t3t47!!!hgf09@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')	
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_41OMSOA23626!62!6@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(TI) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', 'ONM', or 'PROD'")
			flag = true
		}
	}		

	else {
		log.info("Invalid Data Center, Please choose either 'BCC', 'OP', or 'TI'")
		flag = true
	} 

	if (flag == true) {
		return([sql, sql2, true, dc, env])
	}
	else {
		return([sql, sql2, false, dc, env])
	}
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Single Query MFTV2&amp;ArchTrace"><con:settings/><con:config><script><![CDATA[/* -----------------------------------------------------------------------*/
//this file runs a query on a single message id for MFTV2
/* -----------------------------------------------------------------------*/


//EXAMPLE FORMAT: def messageId = ['afd1126.78250c1f.N40.16c48461077.N8000']
//the bracket [] is very important
	
/* -----------------this is where you input message id--------------------*/
def messageId = ['afc10d8.N5f73eb0f.N68.16dd9f9b53e.N7f46']
/* -----------------------------------------------------------------------*/

/* --------this is where you input the environment & data center ---------*/
def dc = 'ti'
def env =  'test'
/* -----------------------------------------------------------------------*/

/* -----------------------------------------------------------------------*/
/*The script should tell you what to do - read the log for additional info*/
/* -----------------------------------------------------------------------*/













//imports
import groovy.sql.Sql
import jxl.*
import jxl.write.*
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")

def Sql sql
def Sql sql2

def flag = false

def databaseInfo = database(sql, sql2, flag, dc, env) 

if (databaseInfo[2] == true) {
	log.info('quitting...')
	return
}

sql = databaseInfo[0]
context.setProperty("sql",sql)

sql2 = databaseInfo[1]
context.setProperty("sql",sql2)



//initiates the workbook
log.info('database connection successful')

/* ----------------!!! NAME OF THE FILE IS DIWN HERE !!!------------------*/
WritableWorkbook workbook = Workbook.createWorkbook(new File("Outputs/"+dc.toUpperCase()+" - "+env.toUpperCase()+" SingleQuery MFTV2&ArchTrace Output.xls"))
WritableSheet sheet = workbook.createSheet("MFTV2", 0)
WritableSheet sheet2 = workbook.createSheet("ArchTrace", 1)

//creates label row
sheet.addCell(new Label(1, 1,"Name"))
sheet.addCell(new Label(2, 1,"Message Id"))
sheet.addCell(new Label(3, 1,"Date"))
sheet.addCell(new Label(4, 1,"Status"))

sheet.addCell(new Label(5, 1,"Correlation ID"))
sheet.addCell(new Label(6, 1,"File Identifier"))
sheet.addCell(new Label(7, 1,"Provider"))
sheet.addCell(new Label(8, 1,"Consumer"))
sheet.addCell(new Label(9, 1,"Status"))
sheet.addCell(new Label(10, 1,"File Bytes"))

sheet.addCell(new Label(11, 1,"Activity"))
sheet.addCell(new Label(12, 1, "-------"))
sheet.addCell(new Label(13, 1,"Consumer"))
sheet.addCell(new Label(14, 1,"Action"))
sheet.addCell(new Label(15, 1,"Status"))
sheet.addCell(new Label(16, 1,"Start"))
sheet.addCell(new Label(17, 1,"End"))
sheet.addCell(new Label(18, 1,"Total Time"))
sheet.addCell(new Label(19, 1,"Directory Path"))


sheet.addCell(new Label(20, 1,"Error Time"))
sheet.addCell(new Label(21, 1,"Error Code"))
sheet.addCell(new Label(22, 1,"Error Message"))
sheet.addCell(new Label(23, 1,"Error Origin"))
sheet.addCell(new Label(24, 1,"Error Trace"))


sheet2.addCell(new Label(1, 1,"Name"))
sheet2.addCell(new Label(2, 1,"Message Id"))
sheet2.addCell(new Label(3, 1,"Date"))
sheet2.addCell(new Label(4, 1,"Status"))

sheet2.addCell(new Label(5, 1,"Sender"))
sheet2.addCell(new Label(6, 1,"Target"))
sheet2.addCell(new Label(7, 1,"Origin"))
sheet2.addCell(new Label(8, 1,"Message Date"))
sheet2.addCell(new Label(9, 1,"Ack_Id"))
sheet2.addCell(new Label(10, 1,"Kafka Topic"))
sheet2.addCell(new Label(11, 1,"Kafka Partition"))
sheet2.addCell(new Label(12, 1,"Kafka Offset"))
sheet2.addCell(new Label(13, 1,"Business Id"))
sheet2.addCell(new Label(14, 1,"State"))
sheet2.addCell(new Label(15, 1,"Trace Id"))

sheet2.addCell(new Label(16, 1,"Error GUID"))
sheet2.addCell(new Label(17, 1,"Sender"))
sheet2.addCell(new Label(18, 1,"Protocol"))
sheet2.addCell(new Label(19, 1,"Kafka Topic"))
sheet2.addCell(new Label(20, 1,"Error Date"))
sheet2.addCell(new Label(21, 1,"Error Code"))
sheet2.addCell(new Label(22, 1,"Error Reason"))
sheet2.addCell(new Label(23, 1,"Error Detail"))



//allows the file time to connect to the database.
Thread.sleep(1000)

def counter = 3
def counter3 = 3
	
//initiates the query strings 
def Transfer = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2 where cbmid = "
def Activity = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2_ACTIVITY where cbmid = "
def ErrorMsg = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2_ERROR where cbmid = "

def Trace
def Hospital
if (dc.toUpperCase().contains('C') || dc.toUpperCase().contains('O')) {
  	Trace = "SELECT * FROM ARCH_SERVICE_NG.arch_trace_monitor where conversation_id = "
  	Hospital = "SELECT * FROM ARCH_SERVICE_NG.arch_error_hospital where conversation_id = "
  }
else {
  	Trace = "SELECT * FROM ARCH_SERVICE.arch_trace_monitor where conversation_id = "
  	Hospital = "SELECT * FROM ARCH_SERVICE.arch_error_hospital where conversation_id = "
  	
  }



//Checks to see if string exists
if (messageId[0].length() > 1) {

	//queries the database for the necessary information
	Transfer = Transfer+"'"+messageId[0]+"'"
	Transfer = Transfer+"Order by Consumer Asc"
	def res = sql.rows(Transfer)

	Activity = Activity+"'"+messageId[0]+"'"
	Activity = Activity+"Order by Consumer, Action Asc"
	def res2 = sql.rows(Activity)

	ErrorMsg = ErrorMsg+"'"+messageId[0]+"'"

	Trace = Trace+"'"+messageId[0]+"'"+" Order By Origin Desc"
	def res4 = sql2.rows(Trace)

	Hospital = Hospital+"'"+messageId[0]+"'"
	def res5 = sql2.rows(Hospital)

	log.info(res)

	if (res.size() == 0) {
		log.info("Database Error")
		sheet.addCell(new Label(5, counter, "Database empty"))		
		workbook.write()
		workbook.close()	
		return
	}

	//Date data = new Date().parse(res2[0].START_TIME)

	//SimpleDateFormat data = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss.S')

	//appends the file (soapUI data) if the messageId exists
	sheet.addCell(new Label(2, counter, messageId[0]))
	sheet2.addCell(new Label(2, counter, messageId[0]))

	log.info(res[0].CORRELATION_ID)


	
	if (res.size() < 2) {


			//mftv2 data 1 
			mftv2(counter,res,0,sheet)


			//error data 1
			if (res[0].STATUS == 'Failed') {
			
				
				def res3 = sql.rows(ErrorMsg)

				//error call
				error(counter,res3,0,sheet)
			}
			
			//activity data 1
			activity(counter,res2,0,sheet) 
			
			counter += 1

			//activity data 2 
			activity(counter,res2,1,sheet)
			

		} // if non cdl entries 
		
		//CDL entries
		else {
			
			//mftv2 data 1
			mftv2(counter,res,0,sheet)


			//error data 1
			def res3
			if (res[0].STATUS == 'Failed') {

				
				res3 = sql.rows(ErrorMsg)

				//error call
				error(counter,res3,0,sheet)
			}
			
			//activity data 1 
			activity(counter,res2,0,sheet)
			
			counter += 1

			//activity data 2 
			activity(counter,res2,1,sheet)


			counter += 1 

			//mftv2 data 2
			mftv2(counter,res,1,sheet)

			//error data 2 
			if (res[1].STATUS == 'Failed') {

				
				res3 = sql.rows(ErrorMsg)
				//error call
				error(counter,res3,1,sheet)
			}
			
			//activity data 3
			activity(counter,res2,2,sheet)

			counter += 1

			//activity data 4
			activity(counter,res2,3,sheet)


		} // if cdl entries
		
		//sheet.addCell(new Label(24, counter, myTestStep.testRequest.endpoint))
		//sheet.addCell(new Label(25, counter, myTestStep.getPropertyList().toString()))
		counter += 1
		counter += 1

		if(res4.size() < 3) {

			//adds the first row 
			trace(counter3, res4, 0, sheet2)

			counter3 += 1

			//adds the second row
			trace(counter3, res4, 1, sheet2)

			//if theres an error, checks the error hopsital 
			if (res4[0].MESSAGE_STATE != 'DELIVERED' || res4[1].MESSAGE_STATE != 'DELIVERED') {

				hospital(counter3, res5, 0, sheet2)
				
			} // if error hopsital
		} //if size < 3

		else {
			// adds the first row 
			trace(counter3,res4,0,sheet2)
			counter3 += 1

			//adds the second row
			trace(counter3,res4,1,sheet2)

			counter3 += 1

			//adds the 3rd row (cdl legacy only)
			trace(counter3,res4,2,sheet2)
			
			counter3 += 1

			// adds the 4th row (cdl legacy only)
			trace(counter3,res4,3,sheet2)

			// if there is an error, checks the error hospital
			if (res4[0].MESSAGE_STATE != 'DELIVERED' || res4[1].MESSAGE_STATE != 'DELIVERED' || res4[2].MESSAGE_STATE != 'DELIVERED'  || res4[3].MESSAGE_STATE != 'DELIVERED' )
			{


				hospital(counter3,res5,0,sheet2)
				
			} // error hospital if (4 entries)
		
		} // else (4 entries)

	

		counter3 += 1
		counter3 += 1







} // if messageId.length() > 0


else {
	log.info("Invalid Message Id")
	sheet.addCell(new Label(2, counter, "Invalid Message Id, make sure it is in the format ['afd1126.78250c1f.N40.16c48461077.N8000']"))
} // else

workbook.write()
workbook.close()

log.info("Completed")

def mftv2(counter, res, increment,sheet) {

	sheet.addCell(new Label(5, counter, res[increment].CORRELATION_ID))
	sheet.addCell(new Label(6, counter, res[increment].FILE_IDENTIFIER))
	sheet.addCell(new Label(7, counter, res[increment].PROVIDER))
	sheet.addCell(new Label(8, counter, res[increment].CONSUMER))
	sheet.addCell(new Label(9, counter, res[increment].STATUS))
	sheet.addCell(new Label(10, counter, res[increment].FILE_BYTES.toString()))
	return(sheet)
}

def activity(counter, res2, increment,sheet) {

	if ((increment+1) <= res2.size()) {
	sheet.addCell(new Label(13, counter, res2[increment].CONSUMER))
	sheet.addCell(new Label(14, counter, res2[increment].ACTION))
	sheet.addCell(new Label(15, counter, res2[increment].STATUS))
	sheet.addCell(new Label(16, counter, res2[increment].START_TIME.toString()))
	sheet.addCell(new Label(17, counter, res2[increment].END_TIME.toString()))
	if (res2[increment].START_TIME == null || res2[increment].END_TIME == null) {
		log.info("NULL TIME")
	}
	else {
	use (groovy.time.TimeCategory) {
	sheet.addCell(new Label(18, counter, (res2[increment].END_TIME.timestampValue()-res2[increment].START_TIME.timestampValue()).toString()))
	}
	}
	sheet.addCell(new Label(19, counter, res2[increment].DIRECTORY_PATH))
	return(sheet)
	}

}

def error(counter, res3, increment, sheet) {

	if (increment == 1 && res3.size() == 1) {
		increment = 0
	}
	sheet.addCell(new Label(20, counter, res3[increment].ERROR_TIME.toString()))
	sheet.addCell(new Label(21, counter, res3[increment].ERROR_CODE))
	sheet.addCell(new Label(22, counter, res3[increment].ERROR_MESSAGE))
	sheet.addCell(new Label(23, counter, res3[increment].ERROR_ORIGIN))
	sheet.addCell(new Label(24, counter, res3[increment].ERROR_TRACE.toString()))

	return(sheet)

}

def trace (counter3, res4, increment, sheet2) {

	sheet2.addCell(new Label(5, counter3, res4[increment].SENDER))
	sheet2.addCell(new Label(6, counter3, res4[increment].TARGET))
	sheet2.addCell(new Label(7, counter3, res4[increment].ORIGIN))
	sheet2.addCell(new Label(8, counter3, res4[increment].MESSAGE_DATE.toString()))
	sheet2.addCell(new Label(9, counter3, res4[increment].ACK_ID))
	sheet2.addCell(new Label(10, counter3, res4[increment].KAFKA_TOPIC))
	sheet2.addCell(new Label(11, counter3, res4[increment].KAFKA_PARTITION.toString()))
	sheet2.addCell(new Label(12, counter3, res4[increment].KAFKA_OFFSET.toString()))
	sheet2.addCell(new Label(13, counter3, res4[increment].BUSINESS_ID))
	sheet2.addCell(new Label(14, counter3, res4[increment].MESSAGE_STATE))
	sheet2.addCell(new Label(15, counter3, res4[increment].TRACE_ID.toString()))

	return(sheet2)

}

def hospital(counter3, res5, increment, sheet2) {

	sheet2.addCell(new Label(16, counter3, res5[increment].ERROR_GUID))
	sheet2.addCell(new Label(17, counter3, res5[increment].SENDER))
	sheet2.addCell(new Label(18, counter3, res5[increment].PROTOCOL))
	sheet2.addCell(new Label(19, counter3, res5[increment].KAFKA_TOPIC))
	sheet2.addCell(new Label(20, counter3, res5[increment].ERROR_DATE.toString()))
	sheet2.addCell(new Label(21, counter3, res5[increment].ERROR_CODE))
	sheet2.addCell(new Label(22, counter3, res5[increment].ERROR_REASON))
	sheet2.addCell(new Label(23, counter3, res5[increment].ERROR_DETAIL))

	return(sheet2)
}

def database(sql, sql2, flag, dc, env) {


	dc = dc.toUpperCase()
	env = env.toUpperCase()

	if (dc.contains('C') || dc.contains('B')) {
		if (env == 'DEV') {
			log.info('BCC DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
		}
		else if (env == 'TEST') {
			log.info('BCC TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
		}
		else if (env == 'ITE') {
			log.info('BCC ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
		}
		else if (env == 'STAGE') {
			log.info('BCC STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
		}
		else if (env == 'PROD') {
			log.info('BCC PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
		}
		else {
			log.info("(BCC) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}
	else if (dc.contains('O') || dc.contains('P')) {
		if (env == 'DEV') {
			log.info('OP DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
		}
		else if (env == 'TEST') {
			log.info('OP TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
		}
		else if (env == 'ITE') {
			log.info('OP ITE') 
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')	
		}
		else if (env == 'STAGE') {
			log.info('OP STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
		}
		else if (env == 'PROD') {
			log.info('OP PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read#0NiyP-#ArctEstH2019#S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(OP) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}	

	//all this is ti WEST
	else if (dc.contains('T') || dc.contains('I')) {
			if (env == 'DEV') {
			log.info('TI DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_DEV-Read-vfeg92df3b!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_DEV-read-=!98630!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
		}
		else if (env == 'TEST') {
			log.info('TI TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Test-Read-034591!623@taaesbrd001.test.ti.census.gov:1521/orcl')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Test-read3275!34!@taaesbrd001.test.ti.census.gov:1521/orcl')
		}
		else if (env == 'ITE') {
			log.info('TI ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_ITE-Read-df3b6542!55@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_ITE-read38275!26!@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
		}
		else if (env == 'STAGE') {
			log.info('TI STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Stage-Read-df3b8730!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Stage-read-=!236!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
		}
		else if (env == 'PROD') {
			log.info('TI PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Read-Only-952dfv63b!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Read-Only324345!!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
		}
		else if (env == 'ONM') {
			log.info('TI ONM')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_OMSOA34t3t47!!!hgf09@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')	
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_41OMSOA23626!62!6@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(TI) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', 'ONM', or 'PROD'")
			flag = true
		}
	}		

	else {
		log.info("Invalid Data Center, Please choose either 'BCC', 'OP', or 'TI'")
		flag = true
	} 

	if (flag == true) {
		return([sql, sql2, true, dc, env])
	}
	else {
		return([sql, sql2, false, dc, env])
	}
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Large Files Step 1"><con:settings/><con:config><script>/* -----------------------------------------------------------------------*/
// This is step 1 for large files. Run the entire test case, and then run this file
// Afterwards, it will create a csv file titled "LargeFilesStepOne.csv" in your
// Outputs folder. After enough time has passed, run step 2
/* -----------------------------------------------------------------------*/

//initiates the workbook
def myFile = new File("Outputs/LargeFilesStepOne.csv")

//creates label row

myFile.write("MessageId")
myFile.append(",")
myFile.append("Name")
myFile.append(",")
myFile.append("Status")
myFile.append(",")
myFile.append("Day")
myFile.append(",")
myFile.append("Date")
myFile.append("\n")
myFile.append("\n")


//set up Database

//gets the number of test steps in the current test case
def totalSteps = testRunner.testCase.getTestStepCount()

//allows the file time to connect to the database.
Thread.sleep(5000)

//iterates through all the test steps
for (i = 0; i&lt;totalSteps; i++) {

  log.info(i)
  //initiates the query strings 
  def Transfer = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2 where cbmid = "
  def Activity = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2_ACTIVITY where cbmid = "
  def ErrorMsg = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2_ERROR where cbmid = "


//gets the i test step
  myTestStep = testRunner.testCase.getTestStepAt(i)

  //checks to see if the test step is disabled
  if (myTestStep.disabled == false &amp;&amp; myTestStep.config.type != 'groovy') {

  	log.info(myTestStep.getLabel())
  	if(myTestStep.httpRequest.response == null) {
  		log.info("NULL")
  		myFile.append(myTestStep.getLabel())
  		myFile.append(",")
  		myFile.append("No Soap Response, run the test case")
  		myFile.append("\n")
  		continue
  	}


  	//retrieves the status, message ID, and date
	def status = myTestStep.httpRequest.response.responseHeaders["#status#"]
	def messageId = myTestStep.httpRequest.response.responseHeaders["messageID"]
	def theDate = myTestStep.httpRequest.response.responseHeaders["Date"]


	//makes sure the status is OKAY
	if (status[0].contains("200") &amp;&amp; messageId != null) {


		//appends the file (soapUI data) if the status is okay
		myFile.append(messageId[0])
		myFile.append(",")
		myFile.append(myTestStep.getLabel())
		myFile.append(",")
		myFile.append(status[0])
		myFile.append(",")
		myFile.append(theDate[0])
		myFile.append("\n")
	}


		
  } // if disabled
} //for


log.info("Completed")

</script></con:config></con:testStep><con:testStep type="groovy" name="Large Files MFTV2 Step 2"><con:settings/><con:config><script><![CDATA[/* -----------------------------------------------------------------------*/
// This is step 2 for large files. Select a database below and run this once
// enough time has passed. 
/* -----------------------------------------------------------------------*/

/* --------this is where you input the environment & data center ---------*/
def dc = 'OP'
def env =  'Test'
/* -----------------------------------------------------------------------*/

/* -----------------------------------------------------------------------*/
/*The script should tell you what to do - read the log for additional info*/
/* -----------------------------------------------------------------------*/

















import groovy.sql.Sql
import jxl.*
import jxl.write.*
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")

def Sql sql
def Sql sql2

def flag = false

def databaseInfo = database(sql, sql2, flag, dc, env) 

if (databaseInfo[2] == true) {
	log.info('quitting...')
	return
}

sql = databaseInfo[0]

//imports


//reads from CSV file
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def csvFilePath = "C:/Users/kanto005/Desktop/book1.csv"
def csvFilePath = "Outputs/LargeFilesStepOne.csv"
context.fileReader = new BufferedReader(new FileReader(csvFilePath))
rowsData = context.fileReader.readLines()
int rowsize = rowsData.size()

//initiates the 2d list, and iterates through the CSV data
counter = 0
CsvData = [[]]

//iterates through the csv file
for( i in rowsData) {

	//splits the CSV data by cell
	if(i.size() > 20) {
		newList = i.split(",")
		//log.info(newList[4])	
		//log.info(newList[0])
		CsvData[counter].add(newList[0])
		CsvData[counter].add(newList[1])

	counter += 1
	CsvData.add([])
	}

} // for

//removes any empty lists (from empty rows in csv file)
for (i = CsvData.size()-1; i >= 0; i--) {
	if (CsvData[i].size() == 0) {
		CsvData.remove(i)
	}
	
} // for


//removes the first label row
CsvData.remove(0)

//initiates the workbook

def fileName = formatName(dc,env)

log.info(fileName)
WritableWorkbook workbook = Workbook.createWorkbook(new File(fileName))
WritableSheet sheet = workbook.createSheet("Worksheet 1", 0)

//creates label row
sheet.addCell(new Label(1, 1,"Name"))
sheet.addCell(new Label(2, 1,"Message Id"))
sheet.addCell(new Label(3, 1,"Date"))
sheet.addCell(new Label(4, 1,"Status"))

sheet.addCell(new Label(5, 1,"Correlation ID"))
sheet.addCell(new Label(6, 1,"File Identifier"))
sheet.addCell(new Label(7, 1,"Provider"))
sheet.addCell(new Label(8, 1,"Consumer"))
sheet.addCell(new Label(9, 1,"Status"))
sheet.addCell(new Label(10, 1,"File Bytes"))

sheet.addCell(new Label(11, 1,"Activity"))
sheet.addCell(new Label(12, 1, "-------"))
sheet.addCell(new Label(13, 1,"Consumer"))
sheet.addCell(new Label(14, 1,"Action"))
sheet.addCell(new Label(15, 1,"Status"))
sheet.addCell(new Label(16, 1,"Start"))
sheet.addCell(new Label(17, 1,"End"))
sheet.addCell(new Label(18, 1,"Total Time"))
sheet.addCell(new Label(19, 1,"Directory Path"))

sheet.addCell(new Label(20, 1,"Error Time"))
sheet.addCell(new Label(21, 1,"Error Code"))
sheet.addCell(new Label(22, 1,"Error Message"))
sheet.addCell(new Label(23, 1,"Error Origin"))
sheet.addCell(new Label(24, 1,"Error Trace"))

//set up Database
//com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")
//Sql sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
//context.setProperty("sql",sql)


//allows the file time to connect to the database.
Thread.sleep(5000)

def counter = 3

//iterates through all the csv data
for (i = 0; i<CsvData.size(); i++) {

  log.info(i)
  //initiates the query strings 
  def Transfer = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2 where cbmid = "
  def Activity = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2_ACTIVITY where cbmid = "
  def ErrorMsg = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2_ERROR where cbmid = "


//gets the i test step

  //checks to see if the test step is disabled


  	//retrieves the status, message ID, and date
	def messageId = [CsvData[i][0]]
	def nome = CsvData[i][1]
	log.info(nome)


	//makes sure the status is OKAY
	if (messageId[0] != null && messageId[0] != 'Disabled') {

		//queries the database for the necessary information
		Transfer = Transfer+"'"+messageId[0]+"'"
		Transfer = Transfer+"Order by Consumer Asc"
		def res = sql.rows(Transfer)

		Activity = Activity+"'"+messageId[0]+"'"
		Activity = Activity+"Order by Consumer, Action Asc"
		def res2 = sql.rows(Activity)

		if (res.size() == 0) {
			log.info("Database Error")
			sheet.addCell(new Label(5, counter, "Database empty"))	
			counter += 1 		
			continue
		}

		//log.info(res[0].CORRELATION_ID)


		//appends the file (soapUI data) if the status is okay
		sheet.addCell(new Label(2, counter, messageId[0]))
		sheet.addCell(new Label(1, counter, nome))


		//non CDL sizes
		if (res.size() < 2) {


			//mftv2 data 1 
			mftv2(counter,res,0,sheet)

			//error data 1
			if (res[0].STATUS == 'Failed') {
			
				ErrorMsg = ErrorMsg+"'"+messageId[0]+"'"
				def res3 = sql.rows(ErrorMsg)

				//error call
				error(counter,res3,0,sheet)
			}
			
			//activity data 1
			activity(counter,res2,0,sheet) 
			
			counter += 1

			//activity data 2 
			activity(counter,res2,1,sheet)
			

		} // if non cdl entries 
		
		//CDL entries
		else {
			
			//mftv2 data 1
			mftv2(counter,res,0,sheet)

			//error data 1
			def res3
			if (res[0].STATUS == 'Failed') {
			
				ErrorMsg = ErrorMsg+"'"+messageId[0]+"'"
				res3 = sql.rows(ErrorMsg)

				//error call
				error(counter,res3,0,sheet)
			}
			
			//activity data 1 
			activity(counter,res2,0,sheet)
			
			counter += 1

			//activity data 2 
			activity(counter,res2,1,sheet)

			counter += 1 

			//mftv2 data 2
			mftv2(counter,res,1,sheet)

			//error data 2 
			if (res[1].STATUS == 'Failed') {
			
				//error call
				error(counter,res3,1,sheet)
			}
			
			//activity data 3
			activity(counter,res2,2,sheet)

			counter += 1

			//activity data 4
			activity(counter,res2,3,sheet)


		} // if cdl entries
		
		//sheet.addCell(new Label(24, counter, myTestStep.testRequest.endpoint))
		//sheet.addCell(new Label(25, counter, myTestStep.getPropertyList().toString()))
		counter += 1
		counter += 1


	} // if status is 200

	//appends the file if the status is unauthorized
	else {

		sheet.addCell(new Label(2,counter,"Failed to retrieve request, status is"))

		counter += 1
		counter += 1
	} // else	
} //for
workbook.write()
workbook.close()

log.info("Completed")

def mftv2(counter, res, increment,sheet) {

	sheet.addCell(new Label(5, counter, res[increment].CORRELATION_ID))
	sheet.addCell(new Label(6, counter, res[increment].FILE_IDENTIFIER))
	sheet.addCell(new Label(7, counter, res[increment].PROVIDER))
	sheet.addCell(new Label(8, counter, res[increment].CONSUMER))
	sheet.addCell(new Label(9, counter, res[increment].STATUS))
	sheet.addCell(new Label(10, counter, res[increment].FILE_BYTES.toString()))
	return(sheet)
}

def activity(counter, res2, increment,sheet) {
 
 if ((increment+1) <= res2.size()) {
	sheet.addCell(new Label(13, counter, res2[increment].CONSUMER))
	sheet.addCell(new Label(14, counter, res2[increment].ACTION))
	sheet.addCell(new Label(15, counter, res2[increment].STATUS))
	sheet.addCell(new Label(16, counter, res2[increment].START_TIME.toString()))
	sheet.addCell(new Label(17, counter, res2[increment].END_TIME.toString()))
	if (res2[increment].START_TIME == null || res2[increment].END_TIME == null) {
		log.info("NULL TIME")
	}
	else {
	use (groovy.time.TimeCategory) {
	sheet.addCell(new Label(18, counter, (res2[increment].END_TIME.timestampValue()-res2[increment].START_TIME.timestampValue()).toString()))
	}
	}
	sheet.addCell(new Label(19, counter, res2[increment].DIRECTORY_PATH))
	return(sheet)
	}

}

def error(counter, res3, increment, sheet) {

	sheet.addCell(new Label(20, counter, res3[increment].ERROR_TIME.toString()))
	sheet.addCell(new Label(21, counter, res3[increment].ERROR_CODE))
	sheet.addCell(new Label(22, counter, res3[increment].ERROR_MESSAGE))
	sheet.addCell(new Label(23, counter, res3[increment].ERROR_ORIGIN))
	sheet.addCell(new Label(24, counter, res3[increment].ERROR_TRACE.toString()))

	return(sheet)

}

def formatName(dc, env) {
	def date = new Date()
	def init = date.toString()
	def fin = "Outputs/"+dc.toUpperCase()+" - "+env.toUpperCase()+' LargeFiles StepTwo MFTV2'
/*
	for (i = 0; i < init.size(); i++) {
		if (i > 2) {
			if (init[i] == ':') {
				fin += '-'
			}
			else {
				fin += init[i]
			}
		}
	}
*/
	fin += ".xls"
	return(fin)
	
}

def database(sql, sql2, flag, dc, env) {


	dc = dc.toUpperCase()
	env = env.toUpperCase()

	if (dc.contains('C') || dc.contains('B')) {
		if (env == 'DEV') {
			log.info('BCC DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
		}
		else if (env == 'TEST') {
			log.info('BCC TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
		}
		else if (env == 'ITE') {
			log.info('BCC ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
		}
		else if (env == 'STAGE') {
			log.info('BCC STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
		}
		else if (env == 'PROD') {
			log.info('BCC PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
		}
		else {
			log.info("(BCC) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}
	else if (dc.contains('O') || dc.contains('P')) {
		if (env == 'DEV') {
			log.info('OP DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
		}
		else if (env == 'TEST') {
			log.info('OP TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
		}
		else if (env == 'ITE') {
			log.info('OP ITE') 
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')	
		}
		else if (env == 'STAGE') {
			log.info('OP STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
		}
		else if (env == 'PROD') {
			log.info('OP PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read#0NiyP-#ArctEstH2019#S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(OP) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}	

	//all this is ti WEST
	else if (dc.contains('T') || dc.contains('I')) {
			if (env == 'DEV') {
			log.info('TI DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_DEV-Read-vfeg92df3b!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_DEV-read-=!98630!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
		}
		else if (env == 'TEST') {
			log.info('TI TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Test-Read-034591!623@taaesbrd001.test.ti.census.gov:1521/orcl')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Test-read3275!34!@taaesbrd001.test.ti.census.gov:1521/orcl')
		}
		else if (env == 'ITE') {
			log.info('TI ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_ITE-Read-df3b6542!55@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_ITE-read38275!26!@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
		}
		else if (env == 'STAGE') {
			log.info('TI STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Stage-Read-df3b8730!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Stage-read-=!236!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
		}
		else if (env == 'PROD') {
			log.info('TI PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Read-Only-952dfv63b!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Read-Only324345!!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
		}
		else if (env == 'ONM') {
			log.info('TI ONM')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_OMSOA34t3t47!!!hgf09@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')	
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_41OMSOA23626!62!6@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(TI) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', 'ONM', or 'PROD'")
			flag = true
		}
	}		

	else {
		log.info("Invalid Data Center, Please choose either 'BCC', 'OP', or 'TI'")
		flag = true
	} 

	if (flag == true) {
		return([sql, sql2, true, dc, env])
	}
	else {
		return([sql, sql2, false, dc, env])
	}
}





]]></script></con:config></con:testStep><con:testStep type="groovy" name="Large Files Arch Trace Step 2"><con:settings/><con:config><script><![CDATA[/* -----------------------------------------------------------------------*/
// This is step 2 for large files. Select a database below and run this once
// enough time has passed. 
/* -----------------------------------------------------------------------*/

/* --------this is where you input the environment & data center ---------*/
def dc = 'ti'
def env =  'Test'
/* -----------------------------------------------------------------------*/

/* -----------------------------------------------------------------------*/
/*The script should tell you what to do - read the log for additional info*/
/* -----------------------------------------------------------------------*/

















import groovy.sql.Sql
import jxl.*
import jxl.write.*
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")

def Sql sql
def Sql sql2

def flag = false

def databaseInfo = database(sql, sql2, flag, dc, env) 

if (databaseInfo[2] == true) {
	log.info('quitting...')
	return
}

sql = databaseInfo[1]

//imports


//reads from CSV file
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def csvFilePath = "C:/Users/kanto005/Desktop/book1.csv"
def csvFilePath = "Outputs/LargeFilesStepOne.csv"
context.fileReader = new BufferedReader(new FileReader(csvFilePath))
rowsData = context.fileReader.readLines()
int rowsize = rowsData.size()

//initiates the 2d list, and iterates through the CSV data
counter = 0
CsvData = [[]]

//iterates through the csv file
for( i in rowsData) {

	//splits the CSV data by cell
	if(i.size() > 20) {
		newList = i.split(",")
		//log.info(newList[4])	
		//log.info(newList[0])
		CsvData[counter].add(newList[0])
		CsvData[counter].add(newList[1])

	counter += 1
	CsvData.add([])
	}

} // for

//removes any empty lists (from empty rows in csv file)
for (i = CsvData.size()-1; i >= 0; i--) {
	if (CsvData[i].size() == 0) {
		CsvData.remove(i)
	}
	
} // for


//removes the first label row
CsvData.remove(0)

//initiates the workbook

def fileName = formatName(dc,env)

log.info(fileName)
WritableWorkbook workbook = Workbook.createWorkbook(new File(fileName))
WritableSheet sheet = workbook.createSheet("Worksheet 1", 0)

//creates label row
sheet.addCell(new Label(1, 1,"Name"))
sheet.addCell(new Label(2, 1,"Message Id"))
sheet.addCell(new Label(3, 1,"Date"))
sheet.addCell(new Label(4, 1,"Status"))

sheet.addCell(new Label(5, 1,"Sender"))
sheet.addCell(new Label(6, 1,"Target"))
sheet.addCell(new Label(7, 1,"Origin"))
sheet.addCell(new Label(8, 1,"Message Date"))
sheet.addCell(new Label(9, 1,"Ack_Id"))
sheet.addCell(new Label(10, 1,"Kafka Topic"))
sheet.addCell(new Label(11, 1,"Kafka Partition"))
sheet.addCell(new Label(12, 1,"Kafka Offset"))
sheet.addCell(new Label(13, 1,"Business Id"))
sheet.addCell(new Label(14, 1,"State"))
sheet.addCell(new Label(15, 1,"Trace Id"))

sheet.addCell(new Label(16, 1,"Error GUID"))
sheet.addCell(new Label(17, 1,"Sender"))
sheet.addCell(new Label(18, 1,"Protocol"))
sheet.addCell(new Label(19, 1,"Kafka Topic"))
sheet.addCell(new Label(20, 1,"Error Date"))
sheet.addCell(new Label(21, 1,"Error Code"))
sheet.addCell(new Label(22, 1,"Error Reason"))
sheet.addCell(new Label(23, 1,"Error Detail"))

//set up Database
//com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")
//Sql sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
//context.setProperty("sql",sql)


//allows the file time to connect to the database.
Thread.sleep(5000)

def counter = 3

//iterates through all the csv data
for (i = 0; i<CsvData.size(); i++) {

  log.info(i)
  //initiates the query strings 
  
  def Trace
  def Hospital
  if (dc.toUpperCase().contains('C') || dc.toUpperCase().contains('O')) {
  	Trace = "SELECT * FROM ARCH_SERVICE_NG.arch_trace_monitor where conversation_id = "
  	Hospital = "SELECT * FROM ARCH_SERVICE_NG.arch_error_hospital where conversation_id = "
  }
  else {
  	Trace = "SELECT * FROM ARCH_SERVICE.arch_trace_monitor where conversation_id = "
  	Hospital = "SELECT * FROM ARCH_SERVICE.arch_error_hospital where conversation_id = "
  	
  }
  

//gets the i test step

  //checks to see if the test step is disabled


  	//retrieves the status, message ID, and date
	def messageId = [CsvData[i][0]]
	def nome = CsvData[i][1]


	//makes sure the status is OKAY
	if (messageId[0] != null && messageId[0] != 'Disabled') {

		//queries the database for the necessary information
		Trace = Trace+"'"+messageId[0]+"'"+" Order By Origin Desc"
		def res = sql.rows(Trace)

		Hospital = Hospital+"'"+messageId[0]+"'"
		def res2 = sql.rows(Hospital)

		if (res.size() == 0) {
			log.info("Database Error")
			sheet.addCell(new Label(5, counter, "Database empty"))	
			counter += 1 		
			continue
		}

		//log.info(res[0].CORRELATION_ID)


		//appends the file (soapUI data) if the status is okay
		sheet.addCell(new Label(2, counter, messageId[0]))
		sheet.addCell(new Label(1, counter, nome))


		//non CDL sizes
if(res.size() < 3) {

			//adds the first row 
			trace(counter, res, 0, sheet)

			counter += 1

			//adds the second row
			trace(counter, res, 1, sheet)

			//if theres an error, checks the error hopsital 
			if (res[0].MESSAGE_STATE != 'DELIVERED' || res[1].MESSAGE_STATE != 'DELIVERED') {

				hospital(counter, res2, 0, sheet)
				
			} // if error hopsital
		} //if size < 3

		else {
			// adds the first row 
			trace(counter,res,0,sheet)
			counter += 1

			//adds the second row
			trace(counter,res,1,sheet)

			counter += 1

			//adds the 3rd row (cdl legacy only)
			trace(counter,res,2,sheet)
			
			counter += 1

			// adds the 4th row (cdl legacy only)
			trace(counter,res,3,sheet)

			// if there is an error, checks the error hospital
			if (res[0].MESSAGE_STATE != 'DELIVERED' || res[1].MESSAGE_STATE != 'DELIVERED' || res[2].MESSAGE_STATE != 'DELIVERED'  || res[3].MESSAGE_STATE != 'DELIVERED' )
			{


				hospital(counter,res2,0,sheet)
				
			} // error hospital if (4 entries)
		
		} // else (4 entries)

	

		counter += 1
		counter += 1


	} // if status is 200

	//appends the file if the status is unauthorized
	else {

		sheet.addCell(new Label(2,counter,"Failed to retrieve request, status is"))

		counter += 1
		counter += 1
	} // else	
} //for
workbook.write()
workbook.close()

log.info("Completed")

def trace (counter, res, increment, sheet) {

	sheet.addCell(new Label(5, counter, res[increment].SENDER))
	sheet.addCell(new Label(6, counter, res[increment].TARGET))
	sheet.addCell(new Label(7, counter, res[increment].ORIGIN))
	sheet.addCell(new Label(8, counter, res[increment].MESSAGE_DATE.toString()))
	sheet.addCell(new Label(9, counter, res[increment].ACK_ID))
	sheet.addCell(new Label(10, counter, res[increment].KAFKA_TOPIC))
	sheet.addCell(new Label(11, counter, res[increment].KAFKA_PARTITION.toString()))
	sheet.addCell(new Label(12, counter, res[increment].KAFKA_OFFSET.toString()))
	sheet.addCell(new Label(13, counter, res[increment].BUSINESS_ID))
	sheet.addCell(new Label(14, counter, res[increment].MESSAGE_STATE))
	sheet.addCell(new Label(15, counter, res[increment].TRACE_ID.toString()))

	return(sheet)

}

def hospital(counter, res2, increment, sheet) {

	sheet.addCell(new Label(16, counter, res2[increment].ERROR_GUID))
	sheet.addCell(new Label(17, counter, res2[increment].SENDER))
	sheet.addCell(new Label(18, counter, res2[increment].PROTOCOL))
	sheet.addCell(new Label(19, counter, res2[increment].KAFKA_TOPIC))
	sheet.addCell(new Label(20, counter, res2[increment].ERROR_DATE.toString()))
	sheet.addCell(new Label(21, counter, res2[increment].ERROR_CODE))
	sheet.addCell(new Label(22, counter, res2[increment].ERROR_REASON))
	sheet.addCell(new Label(23, counter, res2[increment].ERROR_DETAIL))

	return(sheet)
}

def formatName(dc, env) {
	def date = new Date()
	def init = date.toString()
	def fin = "Outputs/"+dc.toUpperCase()+" - "+env.toUpperCase()+' LargeFiles StepTwo ArchTrace'
/*
	for (i = 0; i < init.size(); i++) {
		if (i > 2) {
			if (init[i] == ':') {
				fin += '-'
			}
			else {
				fin += init[i]
			}
		}
	}
*/
	fin += ".xls"
	return(fin)
	
}

def database(sql, sql2, flag, dc, env) {


	dc = dc.toUpperCase()
	env = env.toUpperCase()

	if (dc.contains('C') || dc.contains('B')) {
		if (env == 'DEV') {
			log.info('BCC DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
		}
		else if (env == 'TEST') {
			log.info('BCC TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
		}
		else if (env == 'ITE') {
			log.info('BCC ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
		}
		else if (env == 'STAGE') {
			log.info('BCC STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
		}
		else if (env == 'PROD') {
			log.info('BCC PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
		}
		else {
			log.info("(BCC) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}
	else if (dc.contains('O') || dc.contains('P')) {
		if (env == 'DEV') {
			log.info('OP DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
		}
		else if (env == 'TEST') {
			log.info('OP TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
		}
		else if (env == 'ITE') {
			log.info('OP ITE') 
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')	
		}
		else if (env == 'STAGE') {
			log.info('OP STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
		}
		else if (env == 'PROD') {
			log.info('OP PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read#0NiyP-#ArctEstH2019#S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(OP) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}	

	//all this is ti WEST
	else if (dc.contains('T') || dc.contains('I')) {
			if (env == 'DEV') {
			log.info('TI DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_DEV-Read-vfeg92df3b!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_DEV-read-=!98630!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
		}
		else if (env == 'TEST') {
			log.info('TI TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Test-Read-034591!623@taaesbrd001.test.ti.census.gov:1521/orcl')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Test-read3275!34!@taaesbrd001.test.ti.census.gov:1521/orcl')
		}
		else if (env == 'ITE') {
			log.info('TI ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_ITE-Read-df3b6542!55@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_ITE-read38275!26!@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
		}
		else if (env == 'STAGE') {
			log.info('TI STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Stage-Read-df3b8730!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Stage-read-=!236!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
		}
		else if (env == 'PROD') {
			log.info('TI PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Read-Only-952dfv63b!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Read-Only324345!!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
		}
		else if (env == 'ONM') {
			log.info('TI ONM')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_OMSOA34t3t47!!!hgf09@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')	
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_41OMSOA23626!62!6@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(TI) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', 'ONM', or 'PROD'")
			flag = true
		}
	}		

	else {
		log.info("Invalid Data Center, Please choose either 'BCC', 'OP', or 'TI'")
		flag = true
	} 

	if (flag == true) {
		return([sql, sql2, true, dc, env])
	}
	else {
		return([sql, sql2, false, dc, env])
	}
}





]]></script></con:config></con:testStep><con:testStep type="groovy" name="MFTV2"><con:settings/><con:config><script><![CDATA[/* -----------------------------------------------------------------------*/
// Regression test for MFTV2. Run the entire test case, and select a database
// before running this file.
/* -----------------------------------------------------------------------*/

/* --------this is where you input the environment & data center ---------*/
def dc = 'ti'
def env =  'Test'
/* -----------------------------------------------------------------------*/

/* -----------------------------------------------------------------------*/
/*The script should tell you what to do - read the log for additional info*/
/* -----------------------------------------------------------------------*/















//imports
import groovy.sql.Sql
import jxl.*
import jxl.write.*



def fileName = formatName(dc,env)

log.info(fileName)

WritableWorkbook workbook = Workbook.createWorkbook(new File(fileName))
WritableSheet sheet = workbook.createSheet("Worksheet 1", 0)


com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")

def Sql sql
def Sql sql2

def flag = false

def databaseInfo = database(sql, sql2, flag, dc, env) 

if (databaseInfo[2] == true) {
	log.info('quitting...')
	return
}

sql = databaseInfo[0]
context.setProperty("sql",sql)














//initiates the workbook
//WritableWorkbook workbook = Workbook.createWorkbook(new File("Outputs/OPTestMessageIds.xls"))

//creates label row
sheet.addCell(new Label(1, 1,"Name"))
sheet.addCell(new Label(2, 1,"Message Id"))
sheet.addCell(new Label(3, 1,"Date"))
sheet.addCell(new Label(4, 1,"Status"))

sheet.addCell(new Label(5, 1,"Correlation ID"))
sheet.addCell(new Label(6, 1,"File Identifier"))
sheet.addCell(new Label(7, 1,"Provider"))
sheet.addCell(new Label(8, 1,"Consumer"))
sheet.addCell(new Label(9, 1,"Status"))
sheet.addCell(new Label(10, 1,"File Bytes"))

sheet.addCell(new Label(11, 1,"Activity"))
sheet.addCell(new Label(12, 1, "-------"))
sheet.addCell(new Label(13, 1,"Consumer"))
sheet.addCell(new Label(14, 1,"Action"))
sheet.addCell(new Label(15, 1,"Status"))
sheet.addCell(new Label(16, 1,"Start"))
sheet.addCell(new Label(17, 1,"End"))
sheet.addCell(new Label(18, 1,"Total Time"))
sheet.addCell(new Label(19, 1,"Directory Path"))

sheet.addCell(new Label(20, 1,"Error Time"))
sheet.addCell(new Label(21, 1,"Error Code"))
sheet.addCell(new Label(22, 1,"Error Message"))
sheet.addCell(new Label(23, 1,"Error Origin"))
sheet.addCell(new Label(24, 1,"Error Trace"))

//set up Database



//gets the number of test steps in the current test case
def totalSteps = testRunner.testCase.getTestStepCount()

//allows the file time to connect to the database.
Thread.sleep(5000)

def counter = 3

//iterates through all the test steps
for (i = 0; i<totalSteps; i++) {
	log.info(i)

  //log.info(i)
  //initiates the query strings 
  def Transfer = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2 where cbmid = "
  def Activity = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2_ACTIVITY where cbmid = "
  def ErrorMsg = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2_ERROR where cbmid = "


//gets the i test step
  myTestStep = testRunner.testCase.getTestStepAt(i)

  //checks to see if the test step is disabled
  if (myTestStep.disabled == false && myTestStep.config.type != 'groovy') {

	//if theres no message id, continues
	log.info(myTestStep.getLabel())
  	if(myTestStep.httpRequest.response == null) {
  		log.info("NULL")
  		sheet.addCell(new Label(1,counter,myTestStep.getLabel()))
  		sheet.addCell(new Label(2,counter,"No Soap Response, run the test case"))
  		counter+= 1
  		continue
  	}
  	//retrieves the status, message ID, and date
	def status = myTestStep.httpRequest.response.responseHeaders["#status#"]
	def messageId = myTestStep.httpRequest.response.responseHeaders["messageID"]
	def theDate = myTestStep.httpRequest.response.responseHeaders["Date"]
  	


	//makes sure the status is OKAY
	if (status[0].contains("200") && messageId != null) {

		//queries the database for the necessary information
		Transfer = Transfer+"'"+messageId[0]+"'"
		Transfer = Transfer+"Order by Consumer Asc"
		def res = sql.rows(Transfer)

		Activity = Activity+"'"+messageId[0]+"'"
		Activity = Activity+"Order by Consumer, Action Asc"
		def res2 = sql.rows(Activity)

		ErrorMsg = ErrorMsg+"'"+messageId[0]+"'"


		//appends the file (soapUI data) if the status is okay
		sheet.addCell(new Label(1, counter, myTestStep.getLabel()))
		sheet.addCell(new Label(2, counter, messageId[0]))
		sheet.addCell(new Label(3, counter, theDate[0]))
		sheet.addCell(new Label(4, counter, status[0]))


		if (res.size() == 0) {
			log.info("Database Error")
			sheet.addCell(new Label(5, counter, "Database empty"))
			counter += 1
			continue
		}


		//non CDL sizes
		if (res.size() < 2) {


			//mftv2 data 1 
			mftv2(counter,res,0,sheet)


			//error data 1
			if (res[0].STATUS == 'Failed') {
			
				
				def res3 = sql.rows(ErrorMsg)

				//error call
				error(counter,res3,0,sheet)
			}
			
			//activity data 1
			activity(counter,res2,0,sheet) 
			
			counter += 1

			//activity data 2 
			activity(counter,res2,1,sheet)
			

		} // if non cdl entries 
		
		//CDL entries
		else {
			
			//mftv2 data 1
			mftv2(counter,res,0,sheet)


			//error data 1
			def res3
			if (res[0].STATUS == 'Failed') {

				
				res3 = sql.rows(ErrorMsg)

				//error call
				error(counter,res3,0,sheet)
			}
			
			//activity data 1 
			activity(counter,res2,0,sheet)
			
			counter += 1

			//activity data 2 
			activity(counter,res2,1,sheet)


			counter += 1 

			//mftv2 data 2
			mftv2(counter,res,1,sheet)

			//error data 2 
			if (res[1].STATUS == 'Failed') {

				
				res3 = sql.rows(ErrorMsg)
				//error call
				error(counter,res3,1,sheet)
			}
			
			//activity data 3
			activity(counter,res2,2,sheet)

			counter += 1

			//activity data 4
			activity(counter,res2,3,sheet)


		} // if cdl entries
		
		//sheet.addCell(new Label(24, counter, myTestStep.testRequest.endpoint))
		//sheet.addCell(new Label(25, counter, myTestStep.getPropertyList().toString()))
		counter += 1
		counter += 1


	} // if status is 200

	//appends the file if the status is unauthorized
	else {
		log.info(myTestStep.getLabel())
		sheet.addCell(new Label(1,counter,myTestStep.getLabel()))
		sheet.addCell(new Label(2,counter,"Failed to retrieve request,"))
		sheet.addCell(new Label(3,counter,"status is"))
		sheet.addCell(new Label(4,counter,status[0]))
		counter += 1
	} // else	
  } // if disabled
} //for
workbook.write()
workbook.close()

log.info("Completed")

def mftv2(counter, res, increment,sheet) {
	
	sheet.addCell(new Label(5, counter, res[increment].CORRELATION_ID))
	sheet.addCell(new Label(6, counter, res[increment].FILE_IDENTIFIER))
	sheet.addCell(new Label(7, counter, res[increment].PROVIDER))
	sheet.addCell(new Label(8, counter, res[increment].CONSUMER))
	sheet.addCell(new Label(9, counter, res[increment].STATUS))
	sheet.addCell(new Label(10, counter, res[increment].FILE_BYTES.toString()))
	return(sheet)
}

def activity(counter, res2, increment,sheet) {

	if ((increment+1) <= res2.size()) {
	sheet.addCell(new Label(13, counter, res2[increment].CONSUMER))
	sheet.addCell(new Label(14, counter, res2[increment].ACTION))
	sheet.addCell(new Label(15, counter, res2[increment].STATUS))
	sheet.addCell(new Label(16, counter, res2[increment].START_TIME.toString()))
	sheet.addCell(new Label(17, counter, res2[increment].END_TIME.toString()))
	if (res2[increment].START_TIME == null || res2[increment].END_TIME == null) {
		log.info("NULL TIME")
	}
	else {
	use (groovy.time.TimeCategory) {
	sheet.addCell(new Label(18, counter, (res2[increment].END_TIME.timestampValue()-res2[increment].START_TIME.timestampValue()).toString()))
	}
	}
	sheet.addCell(new Label(19, counter, res2[increment].DIRECTORY_PATH))
	return(sheet)
	}

}

def error(counter, res3, increment, sheet) {

	if (increment == 1 && res3.size() == 1) {
		increment = 0
	}
	sheet.addCell(new Label(20, counter, res3[increment].ERROR_TIME.toString()))
	sheet.addCell(new Label(21, counter, res3[increment].ERROR_CODE))
	sheet.addCell(new Label(22, counter, res3[increment].ERROR_MESSAGE))
	sheet.addCell(new Label(23, counter, res3[increment].ERROR_ORIGIN))
	sheet.addCell(new Label(24, counter, res3[increment].ERROR_TRACE.toString()))

	return(sheet)

}

def formatName(dc, env) {
	def date = new Date()
	def init = date.toString()
	def fin = "Outputs/"+dc.toUpperCase()+" - "+env.toUpperCase()+' MFTV2 Output'
/*
	for (i = 0; i < init.size(); i++) {
		if (i > 2) {
			if (init[i] == ':') {
				fin += '-'
			}
			else {
				fin += init[i]
			}
		}
	}
*/
	fin += ".xls"
	return(fin)
	
}

def database(sql, sql2, flag, dc, env) {


	dc = dc.toUpperCase()
	env = env.toUpperCase()

	if (dc.contains('C') || dc.contains('B')) {
		if (env == 'DEV') {
			log.info('BCC DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
		}
		else if (env == 'TEST') {
			log.info('BCC TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
		}
		else if (env == 'ITE') {
			log.info('BCC ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
		}
		else if (env == 'STAGE') {
			log.info('BCC STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
		}
		else if (env == 'PROD') {
			log.info('BCC PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
		}
		else {
			log.info("(BCC) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}
	else if (dc.contains('O') || dc.contains('P')) {
		if (env == 'DEV') {
			log.info('OP DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
		}
		else if (env == 'TEST') {
			log.info('OP TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
		}
		else if (env == 'ITE') {
			log.info('OP ITE') 
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')	
		}
		else if (env == 'STAGE') {
			log.info('OP STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
		}
		else if (env == 'PROD') {
			log.info('OP PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read#0NiyP-#ArctEstH2019#S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(OP) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}	

	//all this is ti WEST
	else if (dc.contains('T') || dc.contains('I')) {
			if (env == 'DEV') {
			log.info('TI DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_DEV-Read-vfeg92df3b!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_DEV-read-=!98630!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
		}
		else if (env == 'TEST') {
			log.info('TI TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Test-Read-034591!623@taaesbrd001.test.ti.census.gov:1521/orcl')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Test-read3275!34!@taaesbrd001.test.ti.census.gov:1521/orcl')
		}
		else if (env == 'ITE') {
			log.info('TI ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_ITE-Read-df3b6542!55@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_ITE-read38275!26!@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
		}
		else if (env == 'STAGE') {
			log.info('TI STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Stage-Read-df3b8730!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Stage-read-=!236!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
		}
		else if (env == 'PROD') {
			log.info('TI PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Read-Only-952dfv63b!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Read-Only324345!!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
		}
		else if (env == 'ONM') {
			log.info('TI ONM')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_OMSOA34t3t47!!!hgf09@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')	
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_41OMSOA23626!62!6@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(TI) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', 'ONM', or 'PROD'")
			flag = true
		}
	}		

	else {
		log.info("Invalid Data Center, Please choose either 'BCC', 'OP', or 'TI'")
		flag = true
	} 

	if (flag == true) {
		return([sql, sql2, true, dc, env])
	}
	else {
		return([sql, sql2, false, dc, env])
	}
}




]]></script></con:config></con:testStep><con:testStep type="groovy" name="Arch Trace"><con:settings/><con:config><script><![CDATA[/* -----------------------------------------------------------------------*/
// Regression test for Arch Trace. Run the entire test case, and select a database
// before running this file.
/* -----------------------------------------------------------------------*/

/* --------this is where you input the environment & data center ---------*/
def dc = 'ti'
def env =  'Test'
/* -----------------------------------------------------------------------*/

/* -----------------------------------------------------------------------*/
/*The script should tell you what to do - read the log for additional info*/
/* -----------------------------------------------------------------------*/















//imports
import groovy.sql.Sql
import jxl.*
import jxl.write.*



def fileName = formatName(dc,env)

log.info(fileName)

WritableWorkbook workbook = Workbook.createWorkbook(new File(fileName))
WritableSheet sheet = workbook.createSheet("Worksheet 1", 0)


com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")

def Sql sql
def Sql sql2

def flag = false

def databaseInfo = database(sql, sql2, flag, dc, env) 

if (databaseInfo[2] == true) {
	log.info('quitting...')
	return
}

sql = databaseInfo[1]
context.setProperty("sql",sql)














//creates label row
sheet.addCell(new Label(1, 1,"Name"))
sheet.addCell(new Label(2, 1,"Message Id"))
sheet.addCell(new Label(3, 1,"Date"))
sheet.addCell(new Label(4, 1,"Status"))

sheet.addCell(new Label(5, 1,"Sender"))
sheet.addCell(new Label(6, 1,"Target"))
sheet.addCell(new Label(7, 1,"Origin"))
sheet.addCell(new Label(8, 1,"Message Date"))
sheet.addCell(new Label(9, 1,"Ack_Id"))
sheet.addCell(new Label(10, 1,"Kafka Topic"))
sheet.addCell(new Label(11, 1,"Kafka Partition"))
sheet.addCell(new Label(12, 1,"Kafka Offset"))
sheet.addCell(new Label(13, 1,"Business Id"))
sheet.addCell(new Label(14, 1,"State"))
sheet.addCell(new Label(15, 1,"Trace Id"))

sheet.addCell(new Label(16, 1,"Error GUID"))
sheet.addCell(new Label(17, 1,"Sender"))
sheet.addCell(new Label(18, 1,"Protocol"))
sheet.addCell(new Label(19, 1,"Kafka Topic"))
sheet.addCell(new Label(20, 1,"Error Date"))
sheet.addCell(new Label(21, 1,"Error Code"))
sheet.addCell(new Label(22, 1,"Error Reason"))
sheet.addCell(new Label(23, 1,"Error Detail"))


//gets the number of test steps in the current test case
def totalSteps = testRunner.testCase.getTestStepCount()

//allows the file time to connect to the database.


def counter = 3

Thread.sleep(5000)

//iterates through all the test steps
for (i = 0; i<totalSteps; i++) {
	
  //initiates the query strings 
  def Trace
  def Hospital
  if (dc.toUpperCase().contains('C') || dc.toUpperCase().contains('O')) {
  	Trace = "SELECT * FROM ARCH_SERVICE_NG.arch_trace_monitor where conversation_id = "
  	Hospital = "SELECT * FROM ARCH_SERVICE_NG.arch_error_hospital where conversation_id = "
  }
  else {
  	Trace = "SELECT * FROM ARCH_SERVICE.arch_trace_monitor where conversation_id = "
  	Hospital = "SELECT * FROM ARCH_SERVICE.arch_error_hospital where conversation_id = "
  	
  }
  


//gets the i test step
  myTestStep = testRunner.testCase.getTestStepAt(i)

  //checks to see if the test step is disabled
  if (myTestStep.disabled == false && myTestStep.config.type != 'groovy') {

	log.info(myTestStep.getLabel())
  	if(myTestStep.httpRequest.response == null) {
  		log.info("NULL")
  		sheet.addCell(new Label(1,counter,myTestStep.getLabel()))
  		sheet.addCell(new Label(2,counter,"No Soap Response, run the test case"))
  		counter+= 1
  		continue
  	}
  	log.info(i)

  	//retrieves the status, message ID, and date
	def status = myTestStep.httpRequest.response.responseHeaders["#status#"]
	def messageId = myTestStep.httpRequest.response.responseHeaders["messageID"]
	def theDate = myTestStep.httpRequest.response.responseHeaders["Date"]



	//makes sure the status is OKAY
	if (status[0].contains("200") && messageId != null) {

		//queries the database for the necessary information
		Trace = Trace+"'"+messageId[0]+"'"+" Order By Origin desc"
		def res = sql.rows(Trace)

		Hospital = Hospital+"'"+messageId[0]+"'"
		def res2 = sql.rows(Hospital)

		if (res.size() == 0) {
			log.info("Database Error")
			sheet.addCell(new Label(5, counter, "Database empty"))
			counter += 1
			continue
		}

		//appends the file (soapUI data) if the status is okay
		sheet.addCell(new Label(1, counter, myTestStep.getLabel()))
		sheet.addCell(new Label(2, counter, messageId[0]))
		sheet.addCell(new Label(3, counter, theDate[0]))
		sheet.addCell(new Label(4, counter, status[0]))

		if(res.size() < 3) {

			//adds the first row 
			trace(counter, res, 0, sheet)

			counter += 1

			//adds the second row
			trace(counter, res, 1, sheet)

			//if theres an error, checks the error hopsital 
			if (res[0].MESSAGE_STATE != 'DELIVERED' || res[1].MESSAGE_STATE != 'DELIVERED') {

				hospital(counter, res2, 0, sheet)
				
			} // if error hopsital
		} //if size < 3

		else {
			// adds the first row 
			trace(counter,res,0,sheet)
			counter += 1

			//adds the second row
			trace(counter,res,1,sheet)

			counter += 1

			//adds the 3rd row (cdl legacy only)
			trace(counter,res,2,sheet)
			
			counter += 1

			// adds the 4th row (cdl legacy only)
			trace(counter,res,3,sheet)

			// if there is an error, checks the error hospital
			if (res[0].MESSAGE_STATE != 'DELIVERED' || res[1].MESSAGE_STATE != 'DELIVERED' || res[2].MESSAGE_STATE != 'DELIVERED'  || res[3].MESSAGE_STATE != 'DELIVERED' )
			{


				hospital(counter,res2,0,sheet)
				
			} // error hospital if (4 entries)
		
		} // else (4 entries)

	

		counter += 1
		counter += 1


	} // if status is 200

	//appends the file if the status is unauthorized
	else {
		sheet.addCell(new Label(1,counter,myTestStep.getLabel()))
		sheet.addCell(new Label(2,counter,"Failed to retrieve request, status is"))
		sheet.addCell(new Label(3,counter,status[0]))
		counter += 1
		counter += 1
	} // else	
  } // if disabled
} //for
workbook.write()
workbook.close()

log.info("Completed")

def trace (counter, res, increment, sheet) {

	sheet.addCell(new Label(5, counter, res[increment].SENDER))
	sheet.addCell(new Label(6, counter, res[increment].TARGET))
	sheet.addCell(new Label(7, counter, res[increment].ORIGIN))
	sheet.addCell(new Label(8, counter, res[increment].MESSAGE_DATE.toString()))
	sheet.addCell(new Label(9, counter, res[increment].ACK_ID))
	sheet.addCell(new Label(10, counter, res[increment].KAFKA_TOPIC))
	sheet.addCell(new Label(11, counter, res[increment].KAFKA_PARTITION.toString()))
	sheet.addCell(new Label(12, counter, res[increment].KAFKA_OFFSET.toString()))
	sheet.addCell(new Label(13, counter, res[increment].BUSINESS_ID))
	sheet.addCell(new Label(14, counter, res[increment].MESSAGE_STATE))
	sheet.addCell(new Label(15, counter, res[increment].TRACE_ID.toString()))

	return(sheet)

}

def hospital(counter, res2, increment, sheet) {

	sheet.addCell(new Label(16, counter, res2[increment].ERROR_GUID))
	sheet.addCell(new Label(17, counter, res2[increment].SENDER))
	sheet.addCell(new Label(18, counter, res2[increment].PROTOCOL))
	sheet.addCell(new Label(19, counter, res2[increment].KAFKA_TOPIC))
	sheet.addCell(new Label(20, counter, res2[increment].ERROR_DATE.toString()))
	sheet.addCell(new Label(21, counter, res2[increment].ERROR_CODE))
	sheet.addCell(new Label(22, counter, res2[increment].ERROR_REASON))
	sheet.addCell(new Label(23, counter, res2[increment].ERROR_DETAIL))

	return(sheet)
}

def formatName(dc, env) {
	def date = new Date()
	def init = date.toString()
	def fin = "Outputs/"+dc.toUpperCase()+" - "+env.toUpperCase()+' ArchTrace Output'
/*
	for (i = 0; i < init.size(); i++) {
		if (i > 2) {
			if (init[i] == ':') {
				fin += '-'
			}
			else {
				fin += init[i]
			}
		}
	}
*/
	fin += ".xls"
	return(fin)
	
}


def database(sql, sql2, flag, dc, env) {


	dc = dc.toUpperCase()
	env = env.toUpperCase()

	if (dc.contains('C') || dc.contains('B')) {
		if (env == 'DEV') {
			log.info('BCC DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
		}
		else if (env == 'TEST') {
			log.info('BCC TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
		}
		else if (env == 'ITE') {
			log.info('BCC ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
		}
		else if (env == 'STAGE') {
			log.info('BCC STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
		}
		else if (env == 'PROD') {
			log.info('BCC PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
		}
		else {
			log.info("(BCC) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}
	else if (dc.contains('O') || dc.contains('P')) {
		if (env == 'DEV') {
			log.info('OP DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
		}
		else if (env == 'TEST') {
			log.info('OP TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
		}
		else if (env == 'ITE') {
			log.info('OP ITE') 
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')	
		}
		else if (env == 'STAGE') {
			log.info('OP STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
		}
		else if (env == 'PROD') {
			log.info('OP PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read#0NiyP-#ArctEstH2019#S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(OP) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}	

	//all this is ti WEST
	else if (dc.contains('T') || dc.contains('I')) {
			if (env == 'DEV') {
			log.info('TI DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_DEV-Read-vfeg92df3b!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_DEV-read-=!98630!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
		}
		else if (env == 'TEST') {
			log.info('TI TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Test-Read-034591!623@taaesbrd001.test.ti.census.gov:1521/orcl')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Test-read3275!34!@taaesbrd001.test.ti.census.gov:1521/orcl')
		}
		else if (env == 'ITE') {
			log.info('TI ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_ITE-Read-df3b6542!55@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_ITE-read38275!26!@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
		}
		else if (env == 'STAGE') {
			log.info('TI STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Stage-Read-df3b8730!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Stage-read-=!236!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
		}
		else if (env == 'PROD') {
			log.info('TI PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Read-Only-952dfv63b!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Read-Only324345!!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
		}
		else if (env == 'ONM') {
			log.info('TI ONM')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_OMSOA34t3t47!!!hgf09@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')	
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_41OMSOA23626!62!6@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(TI) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', 'ONM', or 'PROD'")
			flag = true
		}
	}		

	else {
		log.info("Invalid Data Center, Please choose either 'BCC', 'OP', or 'TI'")
		flag = true
	} 

	if (flag == true) {
		return([sql, sql2, true, dc, env])
	}
	else {
		return([sql, sql2, false, dc, env])
	}
}


]]></script></con:config></con:testStep><con:testStep type="groovy" name="Arch Trace &amp; MFTV2"><con:settings/><con:config><script><![CDATA[/* -----------------------------------------------------------------------*/
// Regression test for both MFTV2 & Arch Trace. Run the entire test case, and  
// select a database before running this file.
/* -----------------------------------------------------------------------*/
/* --------this is where you input the environment & data center ---------*/
def dc = 'op'
def env =  'Test'
/* -----------------------------------------------------------------------*/

/* -----------------------------------------------------------------------*/
/*The script should tell you what to do - read the log for additional info*/
/* -----------------------------------------------------------------------*/















//imports
import groovy.sql.Sql
import jxl.*
import jxl.write.*



def fileName = formatName(dc,env)

log.info(fileName)

WritableWorkbook workbook = Workbook.createWorkbook(new File(fileName))
WritableSheet sheet = workbook.createSheet("MFTV2", 0)
WritableSheet sheet2 = workbook.createSheet("ArchTrace", 1)


com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")

def Sql sql
def Sql sql2

def flag = false

def databaseInfo = database(sql, sql2, flag, dc, env) 

if (databaseInfo[2] == true) {
	log.info('quitting...')
	return
}

sql = databaseInfo[0]
context.setProperty("sql",sql)

sql2 = databaseInfo[1]
context.setProperty("sql",sql2)













//initiates the workbook
//WritableWorkbook workbook = Workbook.createWorkbook(new File("Outputs/OPTestMessageIds.xls"))

//creates label row
sheet.addCell(new Label(1, 1,"Name"))
sheet.addCell(new Label(2, 1,"Message Id"))
sheet.addCell(new Label(3, 1,"Date"))
sheet.addCell(new Label(4, 1,"Status"))

sheet.addCell(new Label(5, 1,"Correlation ID"))
sheet.addCell(new Label(6, 1,"File Identifier"))
sheet.addCell(new Label(7, 1,"Provider"))
sheet.addCell(new Label(8, 1,"Consumer"))
sheet.addCell(new Label(9, 1,"Status"))
sheet.addCell(new Label(10, 1,"File Bytes"))

sheet.addCell(new Label(11, 1,"Activity"))
sheet.addCell(new Label(12, 1, "-------"))
sheet.addCell(new Label(13, 1,"Consumer"))
sheet.addCell(new Label(14, 1,"Action"))
sheet.addCell(new Label(15, 1,"Status"))
sheet.addCell(new Label(16, 1,"Start"))
sheet.addCell(new Label(17, 1,"End"))
sheet.addCell(new Label(18, 1,"Total Time"))
sheet.addCell(new Label(19, 1,"Directory Path"))

sheet.addCell(new Label(20, 1,"Error Time"))
sheet.addCell(new Label(21, 1,"Error Code"))
sheet.addCell(new Label(22, 1,"Error Message"))
sheet.addCell(new Label(23, 1,"Error Origin"))
sheet.addCell(new Label(24, 1,"Error Trace"))

sheet2.addCell(new Label(1, 1,"Name"))
sheet2.addCell(new Label(2, 1,"Message Id"))
sheet2.addCell(new Label(3, 1,"Date"))
sheet2.addCell(new Label(4, 1,"Status"))

sheet2.addCell(new Label(5, 1,"Sender"))
sheet2.addCell(new Label(6, 1,"Target"))
sheet2.addCell(new Label(7, 1,"Origin"))
sheet2.addCell(new Label(8, 1,"Message Date"))
sheet2.addCell(new Label(9, 1,"Ack_Id"))
sheet2.addCell(new Label(10, 1,"Kafka Topic"))
sheet2.addCell(new Label(11, 1,"Kafka Partition"))
sheet2.addCell(new Label(12, 1,"Kafka Offset"))
sheet2.addCell(new Label(13, 1,"Business Id"))
sheet2.addCell(new Label(14, 1,"State"))
sheet2.addCell(new Label(15, 1,"Trace Id"))

sheet2.addCell(new Label(16, 1,"Error GUID"))
sheet2.addCell(new Label(17, 1,"Sender"))
sheet2.addCell(new Label(18, 1,"Protocol"))
sheet2.addCell(new Label(19, 1,"Kafka Topic"))
sheet2.addCell(new Label(20, 1,"Error Date"))
sheet2.addCell(new Label(21, 1,"Error Code"))
sheet2.addCell(new Label(22, 1,"Error Reason"))
sheet2.addCell(new Label(23, 1,"Error Detail"))

//set up Database



//gets the number of test steps in the current test case
def totalSteps = testRunner.testCase.getTestStepCount()

//allows the file time to connect to the database.
Thread.sleep(5000)

def counter = 3
def counter3 = 3

//iterates through all the test steps
for (i = 0; i<totalSteps; i++) {
	log.info(i)

  //log.info(i)
  //initiates the query strings 
  def Transfer = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2 where cbmid = "
  def Activity = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2_ACTIVITY where cbmid = "
  def ErrorMsg = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2_ERROR where cbmid = "

  def Trace
  def Hospital
  if (dc.toUpperCase().contains('C') || dc.toUpperCase().contains('O')) {
  	Trace = "SELECT * FROM ARCH_SERVICE_NG.arch_trace_monitor where conversation_id = "
  	Hospital = "SELECT * FROM ARCH_SERVICE_NG.arch_error_hospital where conversation_id = "
  }
  else {
  	Trace = "SELECT * FROM ARCH_SERVICE.arch_trace_monitor where conversation_id = "
  	Hospital = "SELECT * FROM ARCH_SERVICE.arch_error_hospital where conversation_id = "
  	
  }


//gets the i test step
  myTestStep = testRunner.testCase.getTestStepAt(i)

  //checks to see if the test step is disabled
  if (myTestStep.disabled == false && myTestStep.config.type != 'groovy') {

	//if theres no message id, continues
	log.info(myTestStep.getLabel())
  	if(myTestStep.httpRequest.response == null) {
  		log.info("NULL")
  		sheet.addCell(new Label(1,counter,myTestStep.getLabel()))
  		sheet.addCell(new Label(2,counter,"No Soap Response, run the test case"))
  		counter+= 1
  		sheet2.addCell(new Label(1,counter,myTestStep.getLabel()))
  		sheet2.addCell(new Label(2,counter,"No Soap Response, run the test case"))
  		counter3+= 1
  		continue
  	}
  	//retrieves the status, message ID, and date
	def status = myTestStep.httpRequest.response.responseHeaders["#status#"]
	def messageId = myTestStep.httpRequest.response.responseHeaders["messageID"]
	def theDate = myTestStep.httpRequest.response.responseHeaders["Date"]
  	


	//makes sure the status is OKAY
	if (status[0].contains("200") && messageId != null) {

		//queries the database for the necessary information
		Transfer = Transfer+"'"+messageId[0]+"'"
		Transfer = Transfer+"Order by Consumer Asc"
		def res = sql.rows(Transfer)

		Activity = Activity+"'"+messageId[0]+"'"
		Activity = Activity+"Order by Consumer, Action Asc"
		def res2 = sql.rows(Activity)

		ErrorMsg = ErrorMsg+"'"+messageId[0]+"'"

		Trace = Trace+"'"+messageId[0]+"'"+" Order By Origin desc"
		def res4 = sql2.rows(Trace)

		Hospital = Hospital+"'"+messageId[0]+"'"
		def res5 = sql2.rows(Hospital)


		//appends the file (soapUI data) if the status is okay
		sheet.addCell(new Label(1, counter, myTestStep.getLabel()))
		sheet.addCell(new Label(2, counter, messageId[0]))
		sheet.addCell(new Label(3, counter, theDate[0]))
		sheet.addCell(new Label(4, counter, status[0]))

		sheet2.addCell(new Label(1, counter, myTestStep.getLabel()))
		sheet2.addCell(new Label(2, counter, messageId[0]))
		sheet2.addCell(new Label(3, counter, theDate[0]))
		sheet2.addCell(new Label(4, counter, status[0]))


		if (res.size() == 0 || res4.size() == 0) {
			def s1 = ''
			def s2 = ''
			if (res.size() == 0) {
				s1 += "*"
			}
			if (res4.size() == 0) {
				s2 += "*"
			}
			log.info("Database Error")
			sheet.addCell(new Label(5, counter, "Database empty"+s1))
			sheet2.addCell(new Label(5, counter, "Database empty"+s2))
			counter += 1
			continue
		}


		//non CDL sizes
		if (res.size() < 2) {


			//mftv2 data 1 
			mftv2(counter,res,0,sheet)


			//error data 1
			if (res[0].STATUS == 'Failed') {
			
				
				def res3 = sql.rows(ErrorMsg)

				//error call
				error(counter,res3,0,sheet)
			}
			
			//activity data 1
			activity(counter,res2,0,sheet) 
			
			counter += 1

			//activity data 2 
			activity(counter,res2,1,sheet)
			

		} // if non cdl entries 
		
		//CDL entries
		else {
			
			//mftv2 data 1
			mftv2(counter,res,0,sheet)


			//error data 1
			def res3
			if (res[0].STATUS == 'Failed') {

				
				res3 = sql.rows(ErrorMsg)

				//error call
				error(counter,res3,0,sheet)
			}
			
			//activity data 1 
			activity(counter,res2,0,sheet)
			
			counter += 1

			//activity data 2 
			activity(counter,res2,1,sheet)


			counter += 1 

			//mftv2 data 2
			mftv2(counter,res,1,sheet)

			//error data 2 
			if (res[1].STATUS == 'Failed') {

				
				res3 = sql.rows(ErrorMsg)
				//error call
				error(counter,res3,1,sheet)
			}
			
			//activity data 3
			activity(counter,res2,2,sheet)

			counter += 1

			//activity data 4
			activity(counter,res2,3,sheet)


		} // if cdl entries
		
		//sheet.addCell(new Label(24, counter, myTestStep.testRequest.endpoint))
		//sheet.addCell(new Label(25, counter, myTestStep.getPropertyList().toString()))
		counter += 1
		counter += 1

		if(res4.size() < 3) {

			//adds the first row 
			trace(counter3, res4, 0, sheet2)

			counter3 += 1

			//adds the second row
			trace(counter3, res4, 1, sheet2)

			//if theres an error, checks the error hopsital 
			if (res4[0].MESSAGE_STATE != 'DELIVERED' || res4[1].MESSAGE_STATE != 'DELIVERED') {

				hospital(counter3, res5, 0, sheet2)
				
			} // if error hopsital
		} //if size < 3

		else {
			// adds the first row 
			trace(counter3,res4,0,sheet2)
			counter3 += 1

			//adds the second row
			trace(counter3,res4,1,sheet2)

			counter3 += 1

			//adds the 3rd row (cdl legacy only)
			trace(counter3,res4,2,sheet2)
			
			counter3 += 1

			// adds the 4th row (cdl legacy only)
			trace(counter3,res4,3,sheet2)

			// if there is an error, checks the error hospital
			if (res4[0].MESSAGE_STATE != 'DELIVERED' || res4[1].MESSAGE_STATE != 'DELIVERED' || res4[2].MESSAGE_STATE != 'DELIVERED'  || res4[3].MESSAGE_STATE != 'DELIVERED' )
			{


				hospital(counter3,res5,0,sheet2)
				
			} // error hospital if (4 entries)
		
		} // else (4 entries)

	

		counter3 += 1
		counter3 += 1





	} // if status is 200

	

	//appends the file if the status is unauthorized
	else {
		
		log.info(myTestStep.getLabel())
		sheet.addCell(new Label(1,counter,myTestStep.getLabel()))
		sheet.addCell(new Label(2,counter,"Failed to retrieve request,"))
		sheet.addCell(new Label(3,counter,"status is"))
		sheet.addCell(new Label(4,counter,status[0]))
		counter += 1

		sheet2.addCell(new Label(1,counter3,myTestStep.getLabel()))
		sheet2.addCell(new Label(2,counter3,"Failed to retrieve request,"))
		sheet2.addCell(new Label(3,counter3,"status is"))
		sheet2.addCell(new Label(4,counter3,status[0]))
		counter3 += 1
		
	} // else	
  } // if disabled
} //for
workbook.write()
workbook.close()

log.info("Completed")

def mftv2(counter, res, increment,sheet) {
	
	sheet.addCell(new Label(5, counter, res[increment].CORRELATION_ID))
	sheet.addCell(new Label(6, counter, res[increment].FILE_IDENTIFIER))
	sheet.addCell(new Label(7, counter, res[increment].PROVIDER))
	sheet.addCell(new Label(8, counter, res[increment].CONSUMER))
	sheet.addCell(new Label(9, counter, res[increment].STATUS))
	sheet.addCell(new Label(10, counter, res[increment].FILE_BYTES.toString()))
	return(sheet)
}

def activity(counter, res2, increment,sheet) {

	if ((increment+1) <= res2.size()) {
	sheet.addCell(new Label(13, counter, res2[increment].CONSUMER))
	sheet.addCell(new Label(14, counter, res2[increment].ACTION))
	sheet.addCell(new Label(15, counter, res2[increment].STATUS))
	sheet.addCell(new Label(16, counter, res2[increment].START_TIME.toString()))
	sheet.addCell(new Label(17, counter, res2[increment].END_TIME.toString()))
	if (res2[increment].START_TIME == null || res2[increment].END_TIME == null) {
		log.info("NULL TIME")
	}
	else {
	use (groovy.time.TimeCategory) {
	sheet.addCell(new Label(18, counter, (res2[increment].END_TIME.timestampValue()-res2[increment].START_TIME.timestampValue()).toString()))
	}
	}
	sheet.addCell(new Label(19, counter, res2[increment].DIRECTORY_PATH))
	return(sheet)
	}

}

def error(counter, res3, increment, sheet) {

	if (increment == 1 && res3.size() == 1) {
		increment = 0
	}
	sheet.addCell(new Label(20, counter, res3[increment].ERROR_TIME.toString()))
	sheet.addCell(new Label(21, counter, res3[increment].ERROR_CODE))
	sheet.addCell(new Label(22, counter, res3[increment].ERROR_MESSAGE))
	sheet.addCell(new Label(23, counter, res3[increment].ERROR_ORIGIN))
	sheet.addCell(new Label(24, counter, res3[increment].ERROR_TRACE.toString()))

	return(sheet)

}

def trace (counter3, res4, increment, sheet2) {

	sheet2.addCell(new Label(5, counter3, res4[increment].SENDER))
	sheet2.addCell(new Label(6, counter3, res4[increment].TARGET))
	sheet2.addCell(new Label(7, counter3, res4[increment].ORIGIN))
	sheet2.addCell(new Label(8, counter3, res4[increment].MESSAGE_DATE.toString()))
	sheet2.addCell(new Label(9, counter3, res4[increment].ACK_ID))
	sheet2.addCell(new Label(10, counter3, res4[increment].KAFKA_TOPIC))
	sheet2.addCell(new Label(11, counter3, res4[increment].KAFKA_PARTITION.toString()))
	sheet2.addCell(new Label(12, counter3, res4[increment].KAFKA_OFFSET.toString()))
	sheet2.addCell(new Label(13, counter3, res4[increment].BUSINESS_ID))
	sheet2.addCell(new Label(14, counter3, res4[increment].MESSAGE_STATE))
	sheet2.addCell(new Label(15, counter3, res4[increment].TRACE_ID.toString()))

	return(sheet2)

}

def hospital(counter3, res5, increment, sheet2) {

	sheet2.addCell(new Label(16, counter3, res5[increment].ERROR_GUID))
	sheet2.addCell(new Label(17, counter3, res5[increment].SENDER))
	sheet2.addCell(new Label(18, counter3, res5[increment].PROTOCOL))
	sheet2.addCell(new Label(19, counter3, res5[increment].KAFKA_TOPIC))
	sheet2.addCell(new Label(20, counter3, res5[increment].ERROR_DATE.toString()))
	sheet2.addCell(new Label(21, counter3, res5[increment].ERROR_CODE))
	sheet2.addCell(new Label(22, counter3, res5[increment].ERROR_REASON))
	sheet2.addCell(new Label(23, counter3, res5[increment].ERROR_DETAIL))

	return(sheet2)
}

def formatName(dc, env) {
	def date = new Date()
	def init = date.toString()
	def fin = "Outputs/"+dc.toUpperCase()+" - "+env.toUpperCase()+' MFTV2&ArchTrace Output'
/*
	for (i = 0; i < init.size(); i++) {
		if (i > 2) {
			if (init[i] == ':') {
				fin += '-'
			}
			else {
				fin += init[i]
			}
		}
	}
*/
	fin += ".xls"
	return(fin)
	
}

def database(sql, sql2, flag, dc, env) {


	dc = dc.toUpperCase()
	env = env.toUpperCase()

	if (dc.contains('C') || dc.contains('B')) {
		if (env == 'DEV') {
			log.info('BCC DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
		}
		else if (env == 'TEST') {
			log.info('BCC TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
		}
		else if (env == 'ITE') {
			log.info('BCC ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
		}
		else if (env == 'STAGE') {
			log.info('BCC STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
		}
		else if (env == 'PROD') {
			log.info('BCC PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
		}
		else {
			log.info("(BCC) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}
	else if (dc.contains('O') || dc.contains('P')) {
		if (env == 'DEV') {
			log.info('OP DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
		}
		else if (env == 'TEST') {
			log.info('OP TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
		}
		else if (env == 'ITE') {
			log.info('OP ITE') 
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')	
		}
		else if (env == 'STAGE') {
			log.info('OP STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
		}
		else if (env == 'PROD') {
			log.info('OP PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read#0NiyP-#ArctEstH2019#S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(OP) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}	

	//all this is ti WEST
	else if (dc.contains('T') || dc.contains('I')) {
			if (env == 'DEV') {
			log.info('TI DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_DEV-Read-vfeg92df3b!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_DEV-read-=!98630!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
		}
		else if (env == 'TEST') {
			log.info('TI TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Test-Read-034591!623@taaesbrd001.test.ti.census.gov:1521/orcl')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Test-read3275!34!@taaesbrd001.test.ti.census.gov:1521/orcl')
		}
		else if (env == 'ITE') {
			log.info('TI ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_ITE-Read-df3b6542!55@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_ITE-read38275!26!@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
		}
		else if (env == 'STAGE') {
			log.info('TI STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Stage-Read-df3b8730!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Stage-read-=!236!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
		}
		else if (env == 'PROD') {
			log.info('TI PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Read-Only-952dfv63b!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Read-Only324345!!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
		}
		else if (env == 'ONM') {
			log.info('TI ONM')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_OMSOA34t3t47!!!hgf09@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')	
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_41OMSOA23626!62!6@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(TI) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', 'ONM', or 'PROD'")
			flag = true
		}
	}		

	else {
		log.info("Invalid Data Center, Please choose either 'BCC', 'OP', or 'TI'")
		flag = true
	} 

	if (flag == true) {
		return([sql, sql2, true, dc, env])
	}
	else {
		return([sql, sql2, false, dc, env])
	}
}




]]></script></con:config></con:testStep><con:testStep type="groovy" name="Multiple Query MFTV2"><con:settings/><con:config><script><![CDATA[/* -----------------------------------------------------------------------*/
// This allows you to run a regression test on multiple message ids.
// go to your Inputs folder and edit the message ids in the first column. 
// Remember, these message Ids can only be from 1 database.  
/* -----------------------------------------------------------------------*/

/* --------this is where you input the environment & data center ---------*/
def dc = 'BCC'
def env =  'Test'
/* -----------------------------------------------------------------------*/

/* -----------------------------------------------------------------------*/
/*The script should tell you what to do - read the log for additional info*/
/* -----------------------------------------------------------------------*/

















import groovy.sql.Sql
import jxl.*
import jxl.write.*
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")

def Sql sql
def Sql sql2

def flag = false

def databaseInfo = database(sql, sql2, flag, dc, env) 

if (databaseInfo[2] == true) {
	log.info('quitting...')
	return
}

sql = databaseInfo[0]

//imports


//reads from CSV file
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def csvFilePath = "C:/Users/kanto005/Desktop/book1.csv"
def csvFilePath = "C:/Users/kanto005/Desktop/Daniel's SoapUI-5.0.0/bin/Inputs/MultipleQuery.csv"
context.fileReader = new BufferedReader(new FileReader(csvFilePath))
rowsData = context.fileReader.readLines()
int rowsize = rowsData.size()

//initiates the 2d list, and iterates through the CSV data
counter = 0
CsvData = [[]]

//iterates through the csv file
for( i in rowsData) {

	//splits the CSV data by cell
	if(i.size() > 20) {
		newList = i.split(",")
		//log.info(newList[4])	
		//log.info(newList[0])
		CsvData[counter].add(newList[0])

	counter += 1
	CsvData.add([])
	}

} // for

//removes any empty lists (from empty rows in csv file)
for (i = CsvData.size()-1; i >= 0; i--) {
	if (CsvData[i].size() == 0) {
		CsvData.remove(i)
	}
	
} // for


//removes the first label row
CsvData.remove(0)

//initiates the workbook

def fileName = formatName(dc,env)

log.info(fileName)
WritableWorkbook workbook = Workbook.createWorkbook(new File(fileName))
WritableSheet sheet = workbook.createSheet("Worksheet 1", 0)

//creates label row
sheet.addCell(new Label(1, 1,"Name"))
sheet.addCell(new Label(2, 1,"Message Id"))
sheet.addCell(new Label(3, 1,"Date"))
sheet.addCell(new Label(4, 1,"Status"))

sheet.addCell(new Label(5, 1,"Correlation ID"))
sheet.addCell(new Label(6, 1,"File Identifier"))
sheet.addCell(new Label(7, 1,"Provider"))
sheet.addCell(new Label(8, 1,"Consumer"))
sheet.addCell(new Label(9, 1,"Status"))
sheet.addCell(new Label(10, 1,"File Bytes"))

sheet.addCell(new Label(11, 1,"Activity"))
sheet.addCell(new Label(12, 1, "-------"))
sheet.addCell(new Label(13, 1,"Consumer"))
sheet.addCell(new Label(14, 1,"Action"))
sheet.addCell(new Label(15, 1,"Status"))
sheet.addCell(new Label(16, 1,"Start"))
sheet.addCell(new Label(17, 1,"End"))
sheet.addCell(new Label(18, 1,"Total Time"))
sheet.addCell(new Label(19, 1,"Directory Path"))

sheet.addCell(new Label(20, 1,"Error Time"))
sheet.addCell(new Label(21, 1,"Error Code"))
sheet.addCell(new Label(22, 1,"Error Message"))
sheet.addCell(new Label(23, 1,"Error Origin"))
sheet.addCell(new Label(24, 1,"Error Trace"))

//set up Database
//com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")
//Sql sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
//context.setProperty("sql",sql)


//allows the file time to connect to the database.
Thread.sleep(5000)

def counter = 3

//iterates through all the csv data
for (i = 0; i<CsvData.size(); i++) {

  log.info(i)
  log.info(CsvData[i][0])
  //initiates the query strings 
  def Transfer = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2 where cbmid = "
  def Activity = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2_ACTIVITY where cbmid = "
  def ErrorMsg = "SELECT * FROM MFTV2_ACTIVITY.FILE_TRANSFER_V2_ERROR where cbmid = "


//gets the i test step

  //checks to see if the test step is disabled


  	//retrieves the status, message ID, and date
	def messageId = [CsvData[i][0]]


	//makes sure the status is OKAY
	if (messageId[0] != null && messageId[0] != 'Disabled') {

		//queries the database for the necessary information
		Transfer = Transfer+"'"+messageId[0]+"'"
		Transfer = Transfer+"Order by Consumer Asc"
		def res = sql.rows(Transfer)

		Activity = Activity+"'"+messageId[0]+"'"
		Activity = Activity+"Order by Consumer, Action Asc"
		def res2 = sql.rows(Activity)

		if (res.size() == 0) {
			log.info("Database Error")
			sheet.addCell(new Label(5, counter, "Database empty"))	
			counter += 1 		
			continue
		}

		log.info(res[0].CORRELATION_ID)


		//appends the file (soapUI data) if the status is okay
		sheet.addCell(new Label(2, counter, messageId[0]))


		//non CDL sizes
		if (res.size() < 2) {


			//mftv2 data 1 
			mftv2(counter,res,0,sheet)

			//error data 1
			if (res[0].STATUS == 'Failed') {
			
				ErrorMsg = ErrorMsg+"'"+messageId[0]+"'"
				def res3 = sql.rows(ErrorMsg)

				//error call
				error(counter,res3,0,sheet)
			}
			
			//activity data 1
			activity(counter,res2,0,sheet) 
			
			counter += 1

			//activity data 2 
			activity(counter,res2,1,sheet)
			

		} // if non cdl entries 
		
		//CDL entries
		else {
			
			//mftv2 data 1
			mftv2(counter,res,0,sheet)

			//error data 1
			def res3
			if (res[0].STATUS == 'Failed') {
			
				ErrorMsg = ErrorMsg+"'"+messageId[0]+"'"
				res3 = sql.rows(ErrorMsg)

				//error call
				error(counter,res3,0,sheet)
			}
			
			//activity data 1 
			activity(counter,res2,0,sheet)
			
			counter += 1

			//activity data 2 
			activity(counter,res2,1,sheet)

			counter += 1 

			//mftv2 data 2
			mftv2(counter,res,1,sheet)

			//error data 2 
			if (res[1].STATUS == 'Failed') {
			
				//error call
				error(counter,res3,1,sheet)
			}
			
			//activity data 3
			activity(counter,res2,2,sheet)

			counter += 1

			//activity data 4
			activity(counter,res2,3,sheet)


		} // if cdl entries
		
		//sheet.addCell(new Label(24, counter, myTestStep.testRequest.endpoint))
		//sheet.addCell(new Label(25, counter, myTestStep.getPropertyList().toString()))
		counter += 1
		counter += 1


	} // if status is 200

	//appends the file if the status is unauthorized
	else {

		sheet.addCell(new Label(2,counter,"Failed to retrieve request, status is"))

		counter += 1
		counter += 1
	} // else	
} //for
workbook.write()
workbook.close()

log.info("Completed")

def mftv2(counter, res, increment,sheet) {

	sheet.addCell(new Label(5, counter, res[increment].CORRELATION_ID))
	sheet.addCell(new Label(6, counter, res[increment].FILE_IDENTIFIER))
	sheet.addCell(new Label(7, counter, res[increment].PROVIDER))
	sheet.addCell(new Label(8, counter, res[increment].CONSUMER))
	sheet.addCell(new Label(9, counter, res[increment].STATUS))
	sheet.addCell(new Label(10, counter, res[increment].FILE_BYTES.toString()))
	return(sheet)
}

def activity(counter, res2, increment,sheet) {
 
 if ((increment+1) <= res2.size()) {
	sheet.addCell(new Label(13, counter, res2[increment].CONSUMER))
	sheet.addCell(new Label(14, counter, res2[increment].ACTION))
	sheet.addCell(new Label(15, counter, res2[increment].STATUS))
	sheet.addCell(new Label(16, counter, res2[increment].START_TIME.toString()))
	sheet.addCell(new Label(17, counter, res2[increment].END_TIME.toString()))
	if (res2[increment].START_TIME == null || res2[increment].END_TIME == null) {
		log.info("NULL TIME")
	}
	else {
	use (groovy.time.TimeCategory) {
	sheet.addCell(new Label(18, counter, (res2[increment].END_TIME.timestampValue()-res2[increment].START_TIME.timestampValue()).toString()))
	}
	}
	sheet.addCell(new Label(19, counter, res2[increment].DIRECTORY_PATH))
	return(sheet)
	}

}

def error(counter, res3, increment, sheet) {

	sheet.addCell(new Label(20, counter, res3[increment].ERROR_TIME.toString()))
	sheet.addCell(new Label(21, counter, res3[increment].ERROR_CODE))
	sheet.addCell(new Label(22, counter, res3[increment].ERROR_MESSAGE))
	sheet.addCell(new Label(23, counter, res3[increment].ERROR_ORIGIN))
	sheet.addCell(new Label(24, counter, res3[increment].ERROR_TRACE.toString()))

	return(sheet)

}

def formatName(dc, env) {
	def date = new Date()
	def init = date.toString()
	def fin = "Outputs/"+dc.toUpperCase()+" - "+env.toUpperCase()+' MultipleQuery MFTV2 Output'
/*
	for (i = 0; i < init.size(); i++) {
		if (i > 2) {
			if (init[i] == ':') {
				fin += '-'
			}
			else {
				fin += init[i]
			}
		}
	}
*/
	fin += ".xls"
	return(fin)
	
}

def database(sql, sql2, flag, dc, env) {


	dc = dc.toUpperCase()
	env = env.toUpperCase()

	if (dc.contains('C') || dc.contains('B')) {
		if (env == 'DEV') {
			log.info('BCC DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
		}
		else if (env == 'TEST') {
			log.info('BCC TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
		}
		else if (env == 'ITE') {
			log.info('BCC ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
		}
		else if (env == 'STAGE') {
			log.info('BCC STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
		}
		else if (env == 'PROD') {
			log.info('BCC PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
		}
		else {
			log.info("(BCC) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}
	else if (dc.contains('O') || dc.contains('P')) {
		if (env == 'DEV') {
			log.info('OP DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
		}
		else if (env == 'TEST') {
			log.info('OP TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
		}
		else if (env == 'ITE') {
			log.info('OP ITE') 
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')	
		}
		else if (env == 'STAGE') {
			log.info('OP STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
		}
		else if (env == 'PROD') {
			log.info('OP PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read#0NiyP-#ArctEstH2019#S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(OP) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}	

	//all this is ti WEST
	else if (dc.contains('T') || dc.contains('I')) {
			if (env == 'DEV') {
			log.info('TI DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_DEV-Read-vfeg92df3b!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_DEV-read-=!98630!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
		}
		else if (env == 'TEST') {
			log.info('TI TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Test-Read-034591!623@taaesbrd001.test.ti.census.gov:1521/orcl')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Test-read3275!34!@taaesbrd001.test.ti.census.gov:1521/orcl')
		}
		else if (env == 'ITE') {
			log.info('TI ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_ITE-Read-df3b6542!55@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_ITE-read38275!26!@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
		}
		else if (env == 'STAGE') {
			log.info('TI STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Stage-Read-df3b8730!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Stage-read-=!236!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
		}
		else if (env == 'PROD') {
			log.info('TI PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Read-Only-952dfv63b!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Read-Only324345!!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
		}
		else if (env == 'ONM') {
			log.info('TI ONM')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_OMSOA34t3t47!!!hgf09@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')	
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_41OMSOA23626!62!6@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(TI) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', 'ONM', or 'PROD'")
			flag = true
		}
	}		

	else {
		log.info("Invalid Data Center, Please choose either 'BCC', 'OP', or 'TI'")
		flag = true
	} 

	if (flag == true) {
		return([sql, sql2, true, dc, env])
	}
	else {
		return([sql, sql2, false, dc, env])
	}
}





]]></script></con:config></con:testStep><con:testStep type="groovy" name="Multiple Query Arch Trace"><con:settings/><con:config><script><![CDATA[/* -----------------------------------------------------------------------*/
// This allows you to run a regression test on multiple message ids.
// go to your Inputs folder and edit the message ids in the first column. 
// Remember, these message Ids can only be from 1 database.  
/* -----------------------------------------------------------------------*/

/* --------this is where you input the environment & data center ---------*/
def dc = 'op'
def env =  'Test'
/* -----------------------------------------------------------------------*/

/* -----------------------------------------------------------------------*/
/*The script should tell you what to do - read the log for additional info*/
/* -----------------------------------------------------------------------*/

















import groovy.sql.Sql
import jxl.*
import jxl.write.*
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")

def Sql sql
def Sql sql2

def flag = false

def databaseInfo = database(sql, sql2, flag, dc, env) 

if (databaseInfo[2] == true) {
	log.info('quitting...')
	return
}

sql = databaseInfo[1]

//imports


//reads from CSV file
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
//def csvFilePath = "C:/Users/kanto005/Desktop/book1.csv"
def csvFilePath = "C:/Users/kanto005/Desktop/Daniel's SoapUI-5.0.0/bin/Inputs/MultipleQuery.csv"
context.fileReader = new BufferedReader(new FileReader(csvFilePath))
rowsData = context.fileReader.readLines()
int rowsize = rowsData.size()

//initiates the 2d list, and iterates through the CSV data
counter = 0
CsvData = [[]]

//iterates through the csv file
for( i in rowsData) {

	//splits the CSV data by cell
	if(i.size() > 20) {
		newList = i.split(",")
		//log.info(newList[4])	
		//log.info(newList[0])
		CsvData[counter].add(newList[0])

	counter += 1
	CsvData.add([])
	}

} // for

//removes any empty lists (from empty rows in csv file)
for (i = CsvData.size()-1; i >= 0; i--) {
	if (CsvData[i].size() == 0) {
		CsvData.remove(i)
	}
	
} // for


//removes the first label row
CsvData.remove(0)

//initiates the workbook

def fileName = formatName(dc,env)

log.info(fileName)
WritableWorkbook workbook = Workbook.createWorkbook(new File(fileName))
WritableSheet sheet = workbook.createSheet("Worksheet 1", 0)

//creates label rowsheet.addCell(new Label(1, 1,"Name"))
sheet.addCell(new Label(2, 1,"Message Id"))
sheet.addCell(new Label(3, 1,"Date"))
sheet.addCell(new Label(4, 1,"Status"))

sheet.addCell(new Label(5, 1,"Sender"))
sheet.addCell(new Label(6, 1,"Target"))
sheet.addCell(new Label(7, 1,"Origin"))
sheet.addCell(new Label(8, 1,"Message Date"))
sheet.addCell(new Label(9, 1,"Ack_Id"))
sheet.addCell(new Label(10, 1,"Kafka Topic"))
sheet.addCell(new Label(11, 1,"Kafka Partition"))
sheet.addCell(new Label(12, 1,"Kafka Offset"))
sheet.addCell(new Label(13, 1,"Business Id"))
sheet.addCell(new Label(14, 1,"State"))
sheet.addCell(new Label(15, 1,"Trace Id"))

sheet.addCell(new Label(16, 1,"Error GUID"))
sheet.addCell(new Label(17, 1,"Sender"))
sheet.addCell(new Label(18, 1,"Protocol"))
sheet.addCell(new Label(19, 1,"Kafka Topic"))
sheet.addCell(new Label(20, 1,"Error Date"))
sheet.addCell(new Label(21, 1,"Error Code"))
sheet.addCell(new Label(22, 1,"Error Reason"))
sheet.addCell(new Label(23, 1,"Error Detail"))

//set up Database
//com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.driver.OracleDriver")
//Sql sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
//context.setProperty("sql",sql)


//allows the file time to connect to the database.
Thread.sleep(5000)

def counter = 3

//iterates through all the csv data
for (i = 0; i<CsvData.size(); i++) {

  log.info(i)
  log.info(CsvData[i][0])
  //initiates the query strings 
  def Trace
  def Hospital
  if (dc.toUpperCase().contains('C') || dc.toUpperCase().contains('O')) {
  	Trace = "SELECT * FROM ARCH_SERVICE_NG.arch_trace_monitor where conversation_id = "
  	Hospital = "SELECT * FROM ARCH_SERVICE_NG.arch_error_hospital where conversation_id = "
  }
  else {
  	Trace = "SELECT * FROM ARCH_SERVICE.arch_trace_monitor where conversation_id = "
  	Hospital = "SELECT * FROM ARCH_SERVICE.arch_error_hospital where conversation_id = "
  	
  }
  

//gets the i test step

  //checks to see if the test step is disabled


  	//retrieves the status, message ID, and date
	def messageId = [CsvData[i][0]]


	//makes sure the status is OKAY
	if (messageId[0] != null && messageId[0] != 'Disabled') {

		//queries the database for the necessary information
		Trace = Trace+"'"+messageId[0]+"'"+" Order By Origin desc"
		def res = sql.rows(Trace)

		Hospital = Hospital+"'"+messageId[0]+"'"
		def res2 = sql.rows(Hospital)

		if (res.size() == 0) {
			log.info("Database Error")
			sheet.addCell(new Label(5, counter, "Database empty"))	
			counter += 1 		
			continue
		}

		//log.info(res[0].CORRELATION_ID)


		//appends the file (soapUI data) if the status is okay
		sheet.addCell(new Label(2, counter, messageId[0]))


		//non CDL sizes
		if(res.size() < 3) {

			//adds the first row 
			trace(counter, res, 0, sheet)

			counter += 1

			//adds the second row
			trace(counter, res, 1, sheet)

			//if theres an error, checks the error hopsital 
			if (res[0].MESSAGE_STATE != 'DELIVERED' || res[1].MESSAGE_STATE != 'DELIVERED') {

				hospital(counter, res2, 0, sheet)
				
			} // if error hopsital
		} //if size < 3

		else {
			// adds the first row 
			trace(counter,res,0,sheet)
			counter += 1

			//adds the second row
			trace(counter,res,1,sheet)

			counter += 1

			//adds the 3rd row (cdl legacy only)
			trace(counter,res,2,sheet)
			
			counter += 1

			// adds the 4th row (cdl legacy only)
			trace(counter,res,3,sheet)

			// if there is an error, checks the error hospital
			if (res[0].MESSAGE_STATE != 'DELIVERED' || res[1].MESSAGE_STATE != 'DELIVERED' || res[2].MESSAGE_STATE != 'DELIVERED'  || res[3].MESSAGE_STATE != 'DELIVERED' )
			{


				hospital(counter,res2,0,sheet)
				
			} // error hospital if (4 entries)
		
		} // else (4 entries)

	

		counter += 1
		counter += 1


	} // if status is 200

	//appends the file if the status is unauthorized
	else {

		sheet.addCell(new Label(2,counter,"Failed to retrieve request, status is"))

		counter += 1
		counter += 1
	} // else	
} //for
workbook.write()
workbook.close()

log.info("Completed")

def trace (counter, res, increment, sheet) {

	sheet.addCell(new Label(5, counter, res[increment].SENDER))
	sheet.addCell(new Label(6, counter, res[increment].TARGET))
	sheet.addCell(new Label(7, counter, res[increment].ORIGIN))
	sheet.addCell(new Label(8, counter, res[increment].MESSAGE_DATE.toString()))
	sheet.addCell(new Label(9, counter, res[increment].ACK_ID))
	sheet.addCell(new Label(10, counter, res[increment].KAFKA_TOPIC))
	sheet.addCell(new Label(11, counter, res[increment].KAFKA_PARTITION.toString()))
	sheet.addCell(new Label(12, counter, res[increment].KAFKA_OFFSET.toString()))
	sheet.addCell(new Label(13, counter, res[increment].BUSINESS_ID))
	sheet.addCell(new Label(14, counter, res[increment].MESSAGE_STATE))
	sheet.addCell(new Label(15, counter, res[increment].TRACE_ID.toString()))

	return(sheet)

}

def hospital(counter, res2, increment, sheet) {

	sheet.addCell(new Label(16, counter, res2[increment].ERROR_GUID))
	sheet.addCell(new Label(17, counter, res2[increment].SENDER))
	sheet.addCell(new Label(18, counter, res2[increment].PROTOCOL))
	sheet.addCell(new Label(19, counter, res2[increment].KAFKA_TOPIC))
	sheet.addCell(new Label(20, counter, res2[increment].ERROR_DATE.toString()))
	sheet.addCell(new Label(21, counter, res2[increment].ERROR_CODE))
	sheet.addCell(new Label(22, counter, res2[increment].ERROR_REASON))
	sheet.addCell(new Label(23, counter, res2[increment].ERROR_DETAIL))

	return(sheet)
}

def formatName(dc, env) {
	def date = new Date()
	def init = date.toString()
	def fin = "Outputs/"+dc.toUpperCase()+" - "+env.toUpperCase()+' MultipleQuery ArchTrace Output'
/*
	for (i = 0; i < init.size(); i++) {
		if (i > 2) {
			if (init[i] == ':') {
				fin += '-'
			}
			else {
				fin += init[i]
			}
		}
	}
*/
	fin += ".xls"
	return(fin)
	
}

def database(sql, sql2, flag, dc, env) {


	dc = dc.toUpperCase()
	env = env.toUpperCase()

	if (dc.contains('C') || dc.contains('B')) {
		if (env == 'DEV') {
			log.info('BCC DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db1.dev.asd.census.gov:1521/posbdev')
		}
		else if (env == 'TEST') {
			log.info('BCC TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db2.test.asd.census.gov:1521/posbtest.test.asd.census.gov')
		}
		else if (env == 'ITE') {
			log.info('BCC ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/POSBITE.STAGE.ASD.CENSUS.GOV')
		}
		else if (env == 'STAGE') {
			log.info('BCC STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db5.stage.asd.census.gov:1521/posbstg.stage.asd.census.gov')
		}
		else if (env == 'PROD') {
			log.info('BCC PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/zeZmwjBNhqdjgypYeRFyTjJl_2019#@esb-db6.asd.census.gov:1521/posbprod.asd.census.gov')
		}
		else {
			log.info("(BCC) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}
	else if (dc.contains('O') || dc.contains('P')) {
		if (env == 'DEV') {
			log.info('OP DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-55f0&arch2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/DSOA.ti.census.gov')
		}
		else if (env == 'TEST') {
			log.info('OP TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ded1-scan.bdc.ti.census.gov:1531/TSOA.ti.census.gov')
		}
		else if (env == 'ITE') {
			log.info('OP ITE') 
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0nlyP-&arcITEEh2019$S3rce@ded1-scan.bdc.ti.census.gov:1531/ISOA.ti.census.gov')	
		}
		else if (env == 'STAGE') {
			log.info('OP STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@sed1-scan.staging.bdc.ti.census.gov:1525/SSOA.ti.census.gov')
		}
		else if (env == 'PROD') {
			log.info('OP PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/Read#0NiyP-#ArctEstH2019#S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_NG_RO/Read$0NiyP-&ArctEstH2019$S5rce@ped1-scan.prod.bdc.ti.census.gov:1525/PSOA.ti.census.gov')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(OP) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', or 'PROD'")
			flag = true
		}
	}	

	//all this is ti WEST
	else if (dc.contains('T') || dc.contains('I')) {
			if (env == 'DEV') {
			log.info('TI DEV')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_DEV-Read-vfeg92df3b!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
			//arch 
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_DEV-read-=!98630!@dev-soa-rds-001.dev.ti.census.gov:1521/orcl')
		}
		else if (env == 'TEST') {
			log.info('TI TEST')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Test-Read-034591!623@taaesbrd001.test.ti.census.gov:1521/orcl')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Test-read3275!34!@taaesbrd001.test.ti.census.gov:1521/orcl')
		}
		else if (env == 'ITE') {
			log.info('TI ITE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_ITE-Read-df3b6542!55@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_ITE-read38275!26!@soa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1521/ORCL')
		}
		else if (env == 'STAGE') {
			log.info('TI STAGE')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Stage-Read-df3b8730!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Stage-read-=!236!@saaesbrd002.staging.ti.census.gov:1521/ORCL')
		}
		else if (env == 'PROD') {
			log.info('TI PROD')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_Read-Only-952dfv63b!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_Read-Only324345!!@paaesbrd004.cm3kypb6r7dx.us-gov-west-1.rds.amazonaws.com:1525/PESB02')
		}
		else if (env == 'ONM') {
			log.info('TI ONM')
			//mft
			sql = Sql.newInstance('jdbc:oracle:thin:MFTV2_ACTIVITY_RO/MFTV2-Act_OMSOA34t3t47!!!hgf09@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')	
			//arch
			sql2 = Sql.newInstance('jdbc:oracle:thin:ARCH_SERVICE_RO/Arch-Service_41OMSOA23626!62!6@omsoa-rds.cpdl7nordxew.us-gov-west-1.rds.amazonaws.com:1525/ORCL')
		}
		//else if (env == 'OTDR') {
			//log.info('OP OTDR')
			//NOT FUNCTIONAL
		//}
		else {
			log.info("(TI) Invalid Environment, Please choose either 'DEV', 'TEST','ITE','STAGE', 'ONM', or 'PROD'")
			flag = true
		}
	}		

	else {
		log.info("Invalid Data Center, Please choose either 'BCC', 'OP', or 'TI'")
		flag = true
	} 

	if (flag == true) {
		return([sql, sql2, true, dc, env])
	}
	else {
		return([sql, sql2, false, dc, env])
	}
}





]]></script></con:config></con:testStep><con:testStep type="groovy" name="NOTES FOR KIRAN PROJECT"><con:settings/><con:config><script>add a provider node column
talk to kiran
remove the endpoint column and replace it with what is in the endpoint spreadsheet
do a 1,10,100,200 gb files

*creating a 10 gb file etc. (on the server)*

for any endpoint, i can put it in a browser and add a ?wsdl at the end of it to put the wsdl
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite>